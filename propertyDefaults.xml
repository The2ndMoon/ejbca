<?xml version="1.0" encoding="UTF-8"?>
<project name="propertyDefaults">
    <description>
            This file sets the property defaults. Included from other files. 
    </description>

	
	<!--
		Merge custom modifications from customejbca.home to
		ejbca.home before reading the other configuration files.
	-->
    <property file="${ejbca.home}/conf/custom.properties" />
    <property name="customejbca.home" location="${ejbca.home}/../ejbca-custom" />
    <available file="${customejbca.home}" type="dir" property="customejbca.present" />
    <condition property="customejbca.message" else="No custom changes to merge."
    	value="Merging available external modifications from ${customejbca.home} (unless done previously).">
    	<isset property="customejbca.present" />
    </condition>
    <condition property="customejbca.extensions" value="*" else="none-at-all">
    	<isset property="customejbca.present" />
    </condition>
    <condition property="customejbca.dir" value="${customejbca.home}" else="${ejbca.home}/conf">	<!-- This is just any dir that we know exists to avoid error messages.. -->
    	<isset property="customejbca.present" />
    </condition>
	<ant antfile="${ejbca.home}/echo.xml" target="customejbca.message"/>
	<copy todir="${ejbca.home}" overwrite="true" failonerror="false">
		<fileset dir="${customejbca.dir}">
			<include name="**/*.${customejbca.extensions}" unless="runoncesetup.hasrun"/>
			<exclude name="**/*" if="runoncesetup.hasrun"/>
   		</fileset>
	</copy>
	<!-- this property ensures that the copy operation is only made once -->
	<property name="runoncesetup.hasrun" value="true"/>

	<!--
		Prepare for possible EJBCA plugins that should built and merged into the EAR
		file.
	-->
	<available file="${ejbca.home}/conf/plugin.properties" property="plugin.ejbca.present" />
    <property file="${ejbca.home}/conf/plugin.properties" />
	<fail message="File 'plugin.properties' lacks a property setting for 'plugin.ejbca.ant.file'!">
	    <condition>
	    	<and>
		        <isset property="plugin.ejbca.present"/>
	            <not>
		    	  <isset property="plugin.ejbca.ant.file"/>
	            </not>
	    	</and>
	    </condition>
	</fail>
	<fail message="File specified in 'plugin.properties' is not available!">
	    <condition>
	    	<and>
		        <isset property="plugin.ejbca.present"/>
	            <not>
	            	<available file="${plugin.ejbca.ant.file}"/>
	            </not>
	    	</and>
	    </condition>
	</fail>
	<property name="plugin.ejbca.lib.dir" value="${ejbca.home}/doesnotexist"/>

	<!-- Load property files -->	
    <property file="${ejbca.home}/conf/ejbca.properties" />
    <property file="${ejbca.home}/conf/install.properties"/>
    <property file="${ejbca.home}/conf/protection.properties" />
    <property file="${ejbca.home}/conf/database.properties" />
    <property file="${ejbca.home}/conf/mail.properties" />
    <property file="${ejbca.home}/conf/ocsp.properties" />
    <property file="${ejbca.home}/conf/web.properties" />
    <property file="${ejbca.home}/conf/cmp.properties" />
    <property file="${ejbca.home}/conf/jaxws.properties" />
    <property file="${ejbca.home}/conf/xkms.properties" />
    <property file="${ejbca.home}/conf/externalra.properties" />
    <property file="${ejbca.home}/conf/scep.properties" />
    <property file="${ejbca.home}/conf/externalra-gui.properties" />
    <property file="${ejbca.home}/conf/certstore.properties" />
    <property file="${ejbca.home}/conf/crlstore.properties" />
    <property file="${ejbca.home}/conf/va.properties" />
    <property file="${ejbca.home}/conf/va-publisher.properties" />

    <!-- httpsserver.hostname must be set cause it's used in preprocess. It will only be set here if not set in any property file -->
    <property name="httpsserver.hostname" value="localhost"/>

    <!-- A little special something to handle backward compatibility with 
         people using JBOSS_HOME. They can switch to APPSRV_HOME now, and both will work. 
    -->        
    <condition property="jboss.home" value="${env.JBOSS_HOME}" >
        <equals arg1="${appserver.home}" arg2="${appserver.home}"/>
    </condition>
    <condition property="appserver.home" value="${env.APPSRV_HOME}" else="${jboss.home}">
        <contains string="${jboss.home}" substring="JBOSS_HOME"/>
    </condition>
	
	<!-- Auto-detect supported application server type -->
	<available file="${appserver.home}/client/jboss-appclient.jar" property="appserver.type" value="jboss"/>
	<available file="${appserver.home}/client/cxf-api.jar" property="appserver.subtype" value="jboss6"/>
	<available file="${appserver.home}/lib/javaee.jar" property="appserver.type" value="glassfish"/>
	<available file="${appserver.home}/lib/appserv-ext.jar.jar" property="appserver.subtype" value="glassfish2"/>
	<available file="${appserver.home}/modules/bean-validator.jar" property="appserver.subtype" value="glassfish3"/>
	<available file="${appserver.home}/wlserver_10.3/server/lib/wlclient.jar" property="appserver.type" value="weblogic"/>
	<available file="${appserver.home}/lib/commandlineutils.jar" property="appserver.type" value="websphere"/>
	<!-- Not yet tested:
		<available file="${appserver.home}/bin/server.jar" property="appserver.type" value="geronimo"/>
	-->
	<property name="appserver.type.detected.errormessage"
		value="'appserver.type' could not be detected or is not configured. Glassfish 2.1.1, Glassfish 3.1, JBoss 5.1.0.GA, JBoss 6.0.0, WebLogic 10.3.3, WebSphere 7.0.0.13 can be detected. (Is 'appserver.home' configured?)"/>
	<ant antfile="${ejbca.home}/echo.xml" target="appserver.error.message"/>
	
	<condition property="bundle-hibernate-jpa">
		<or>
			<matches pattern="glassfish" string="${appserver.type}"/>
			<matches pattern="weblogic" string="${appserver.type}"/>
			<matches pattern="websphere" string="${appserver.type}"/>
			<!-- ... -->
		</or>
	</condition>
	
	<condition property="exclude-slf4j">
		<or>
			<matches pattern="glassfish3" string="${appserver.subtype}"/>
			<!-- ... -->
		</or>
	</condition>

	<condition property="exclude-xerces">
		<or>
			<matches pattern="jboss6" string="${appserver.subtype}"/>
			<matches pattern="glassfish" string="${appserver.type}"/>
			<!-- ... -->
		</or>
	</condition>

	<condition property="exclude-xalan">
		<or>
			<matches pattern="jboss6" string="${appserver.subtype}"/>
			<!-- ... -->
		</or>
	</condition>

	<condition property="exclude-serializer">
		<or>
			<matches pattern="jboss6" string="${appserver.subtype}"/>
			<!-- ... -->
		</or>
	</condition>

	<!-- Automatically determine DataSource JNDI name prefix from application server type -->
	<condition property="datasource.jndi-name-prefix" value="java:/"><equals arg1="jboss" arg2="${appserver.type}"/></condition>
	<condition property="datasource.jndi-name-prefix" value="jdbc/"><equals arg1="glassfish" arg2="${appserver.type}"/></condition>
	<condition property="datasource.jndi-name-prefix" value=""><equals arg1="weblogic" arg2="${appserver.type}"/></condition>
	<condition property="datasource.jndi-name-prefix" value="jdbc/"><equals arg1="websphere" arg2="${appserver.type}"/></condition>

   <!-- Finally we read in default properties from file. This should be done last since a few settings above
         are automagically detected based on appserver-type for instance -->
    <property file="${ejbca.home}/src/java/defaultvalues.properties"/>

	<!-- set some hard coded defaults, if they have not been set before -->
	<!-- java.ver is used to select the correct version of bc libraries to include in ear -->   
	<property name="java.ver" value="16" />
	<property name="ca.tokentype" value="soft"/>
	<property name="ca.tokenproperties" value=""/>
    <property name="ocspHardTokenClasses" value="${ejbca.home}/ocspHardTokenClasses"/>
    <property name="ocsp.hardToken.classes" location="${ocspHardTokenClasses}"/>
	<property name="weblogic-oracle-columntype" value="" />
	<property name="mail.from" value="ejbca-donotreply@domain.com" />
	<property name="mail.user" value="ejbca_user" />
	<property name="mail.password" value="" />
	<property name="mail.pop3.host" value="localhost" />
	<property name="mail.smtp.host" value="localhost" />
	<property name="mail.smtp.port" value="25" />
	<property name="mail.smtp.auth" value="false" />
	<property name="mail.smtp.starttls.enable" value="false" />
	<property name="mail.debug" value="false" />
	<property name="httpsserver.bindaddress.pubhttp" value="0.0.0.0" />
	<property name="httpsserver.bindaddress.pubhttps" value="0.0.0.0" />
	<property name="httpsserver.bindaddress.privhttps" value="0.0.0.0" />
	<condition property="doc.war.enabled">
		<equals arg1="internal" arg2="${web.docbaseuri}" casesensitive="false" trim="true" />
	</condition>
	<condition property="renew.war.enabled">
		<equals arg1="true" arg2="${web.renewalenabled}" casesensitive="false" trim="true" />
	</condition>
	<condition property="cmptcpservices.enabled">
		<istrue value="${cmp.tcp.enabled}"/>
	</condition>

	<property name="ocsp.enabled" value="true" />
	<property name="certstore.enabled" value="false" />
	<property name="crlstore.enabled" value="false" />
	<property name="crlstore.contextroot" value="/crls" />
	<property name="certstore.contextroot" value="/certificates" />
	<property name="ocsp.contextroot" value="/ejbca/publicweb/status" />

    <target name="display-properties" description="Show current configuration">
        <echo>
---------- ${app.version} CONFIGURATION PROPERTIES ----------
appserver.type           = ${appserver.type}
appserver.home           = ${appserver.home}
ocsp.defaultresponder    = ${ocsp.defaultresponder}
ocsp.signaturealgorithm  = ${ocsp.signaturealgorithm}
datasource.jndi-name     = ${datasource.jndi-name}
datasource.jndi-name-prefix = ${datasource.jndi-name-prefix}
database.name            = ${database.name}
database.url             = ${database.url}
database.driver          = ${database.driver}
database.username        = ${database.username}
database.password        = ${database.password}
weblogic-oracle-columntype = ${weblogic-oracle-columntype}
mail.jndi-name           = ${mail.jndi-name}
mail.from                = ${mail.from}
mail.user                = ${mail.user}
mail.password            = ${mail.password}
mail.smtp.host           = ${mail.smtp.host}
mail.smtp.port           = ${mail.smtp.port}
mail.smtp.auth           = ${mail.smtp.auth}
mail.debug               = ${mail.debug}
httpserver.pubhttp	     = ${httpserver.pubhttp}
httpserver.pubhttps	     = ${httpserver.pubhttps}
httpserver.privhttps     = ${httpserver.privhttps}
httpsserver.hostname     = ${httpsserver.hostname}
httpsserver.password     = ${httpsserver.password}
web.contentencoding      = ${web.contentencoding}
web.renewalenabled       = ${web.renewalenabled}
ejbcaws.enabled          = ${ejbcaws.enabled}
cmp.allowraverifypopo           = ${cmp.allowraverifypopo}
cmp.defaultca                   = ${cmp.defaultca}
cmp.extractusernamecomponent    = ${cmp.extractusernamecomponent}
cmp.operationmode               = ${cmp.operationmode}
cmp.responseprotection          = ${cmp.responseprotection}
cmp.ra.authenticationsecret     = ${cmp.ra.authenticationsecret}
cmp.ra.namegenerationscheme     = ${cmp.ra.namegenerationscheme}
cmp.ra.namegenerationparameters = ${cmp.ra.namegenerationparameters}
cmp.ra.namegenerationprefix     = ${cmp.ra.namegenerationprefix}
cmp.ra.namegenerationpostfix    = ${cmp.ra.namegenerationpostfix}
cmp.ra.endentityprofile         = ${cmp.ra.endentityprofile}
cmp.ra.certificateprofile       = ${cmp.ra.certificateprofile}
cmp.ra.caname                   = ${cmp.ra.caname}
cmp.tcp.enabled                 = ${cmp.tcp.enabled}
cmp.tcp.portno                  = ${cmp.tcp.portno}
cmp.tcp.logdir                  = ${cmp.tcp.logdir}
cmp.tcp.conffile                = ${cmp.tcp.conffile}
xkms.enabled                    = ${xkms.enabled}
xkms.serviceport                = ${xkms.serviceport}
      </echo>
    </target>

	<target name="fail-unless-appserver-detected">
		<echo message="appserver.home: ${appserver.home}"/>
		<echo message="appserver.type: ${appserver.type}"/>
		<fail message="${appserver.type.detected.errormessage}" unless="appserver.type"/>
	</target>
	
</project>