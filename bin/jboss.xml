<project name="jboss" basedir=".." default="jee:deploy" xmlns:jboss="jboss">
	<property environment="env"/>

    <condition property="jboss7">
        <equals arg1="${appserver.subtype}" arg2="jboss7" />
    </condition>

    
    <!-- ============================================================================ -->
    <!-- Miscelaneous targets for detecting JBoss versions, setting-up file-paths etc -->
    <!-- ============================================================================ -->

    <target name="set-paths-jboss7" if="jboss7">
        <!-- Paths for JBoss 7 -->
        <property name="jboss7.mode" value="standalone"/>
	    <property name="jboss.server.home.dir" location="${appserver.home}/${jboss7.mode}"/>
        <property name="jboss.conf.dir" location="${jboss.server.home.dir}/configuration"/>
	    <property name="jboss.deploy.dir" location="${jboss.server.home.dir}/deployments"/>
	    <property name="jboss.farm.dir" location="${jboss.deploy.dir}"/> <!-- TODO -->
	    <property name="keystore.file" value="configuration/keystore/keystore.jks"/>
	    <property name="truststore.file" value="configuration/keystore/truststore.jks"/>
    </target>

    <target name="set-paths-not-jboss7" unless="jboss7">
        <!-- Paths for JBoss 4, 5 and 6 -->
        <property name="jboss.config" value="default"/>
        <property name="jboss.farm.name" value="deploy"/>
	    <property name="jboss.server.home.dir" location="${appserver.home}/server/${jboss.config}"/>
        <property name="jboss.conf.dir" location="${jboss.server.home.dir}/conf"/>
	    <property name="jboss.farm.dir" location="${jboss.server.home.dir}/${jboss.farm.name}"/>
	    <property name="jboss.deploy.dir" location="${jboss.server.home.dir}/deploy"/>
	    <property name="keystore.file" value="conf/keystore/keystore.jks"/>
	    <property name="truststore.file" value="conf/keystore/truststore.jks"/>
    </target>
	
    <target name="set-paths" depends="set-paths-jboss7, set-paths-not-jboss7">
    </target>

	<target name="jee:check" depends="set-paths">
		<!--
            we could have a dedicated jboss for ejbca, so give users a chance to override
            otherwise, try to pick the one from environment if it exists
            -->
		<fail message="Please set the property 'appserver.home' for this project" unless="appserver.home"/>
		<!-- jboss-j2ee.jar is JBoss 4.2.x, jboss-appclient.jar is JBoss 5.x and 6.x, modules.xml is JBoss 7.x. Available does not touch the property
		     if the file does not exist, which is why this works. -->
		<available file="${appserver.home}/client/jboss-j2ee.jar" property="appserver.home.valid"/>
		<available file="${appserver.home}/client/jboss-appclient.jar" property="appserver.home.valid"/>
        <available file="${appserver.home}/modules/org/jboss/as/standalone/main/module.xml" property="appserver.home.valid"/>
		<fail message="'appserver.home' (${appserver.home}) does not seem to be a valid JBoss home directory" unless="appserver.home.valid"/>
		<echo message="Using appserver.home : ${appserver.home}"/>
	</target>

	<target name="detect-tomcatdir" depends="set-paths">
		<!-- detect jboss web version -->
		<!-- JBoss 7 has very different TLS config in the big standalone.xml file -->
		<available file="${jboss.deploy.dir}/jbossweb-tomcat41.sar" type="dir" property="jboss.web" value="tomcat41"/>
		<available file="${jboss.deploy.dir}/jbossweb-tomcat50.sar" type="dir" property="jboss.web" value="tomcat50"/>
		<available file="${jboss.deploy.dir}/jbossweb-tomcat55.sar" type="dir" property="jboss.web" value="tomcat55"/>
		<available file="${jboss.deploy.dir}/jboss-web.deployer" type="dir" property="jboss.web" value="tomcat60"/>
		<available file="${jboss.deploy.dir}/jbossweb.sar" type="dir" property="jboss.web" value="tomcat60jboss5"/>
		<available file="${jboss.conf.dir}/${jboss7.mode}.xml" type="file" property="jboss.web" value="jboss7"/>
		
		<fail message="Could not detect JBoss Servlet container version" unless="jboss.web"/>

		<!-- configure the tomcat bundle -->
		<!-- For JBoss 4.0.x tomcat is bundled in jbossweb-tomcat55.sar dir -->
		<available file="${jboss.deploy.dir}/jbossweb-${jboss.web}.sar" type="dir" property="tomcat.dir" value="${jboss.deploy.dir}/jbossweb-${jboss.web}.sar"/>
		<!-- For JBoss 4.2.x tomcat is bundled in jboss-web.deployer dir, i.e. new naming scheme -->
		<available file="${jboss.deploy.dir}/jboss-web.deployer" type="dir" property="tomcat.dir" value="${jboss.deploy.dir}/jboss-web.deployer"/>
		<!-- For JBoss 5.0.0 tomcat has yet a new naming scheme -->
		<available file="${jboss.deploy.dir}/jbossweb.sar" type="dir" property="tomcat.dir" value="${jboss.deploy.dir}/jbossweb.sar"/>
		<!-- For JBoss 7.1.0 tomcat has yet a new configuration in the unified global config file -->
		<available file="${jboss.conf.dir}/${jboss7.mode}.xml" type="file" property="tomcat.dir" value="${jboss.conf.dir}"/>
	</target>


        <!-- ================================================================ -->
        <!-- Generic targets used for supporting different versions of JBoss. -->
        <!-- ================================================================ -->

        <!-- Deploys the main (CA) datasource. -->
        <target name="jee:deployDS" depends="jee:deployDSJBoss5,jee:deployDSJBoss7"  />

        <!-- Deploys the OCSP datasource. -->
        <target name="jee:deployOCSPDS" if="ocsp-datasource.jndi-name">
            <antcall target="jee:deployOCSPDSJBoss5" />
            <antcall target="jee:deployOCSPDSJBoss7" />
        </target>

        <!-- Deploys the services (mail etc). -->
        <target name="jee:deployServices" depends="jee:deployServicesJBoss5,jee:deployServicesJBoss7"  />

        <!-- Configures the web interface component of the application server. -->
        <target name="jee:web-configure" depends="jee:web-configureJBoss5,jee:web-configureJBoss7" unless="web.noconfigure" />

        <!-- Notifies the application server to perform (re)deployment of an application. -->
        <target name="notifyDeploymentScanner" depends="notifyDeploymentScannerJBoss5,notifyDeploymentScannerJBoss7" />

        <!-- Determines if server is running or not, and fails if it isn't. -->
	<target name="jee:assert-run"  depends="jee:assert-runJBoss5,jee:assert-runJBoss7" />

        <!-- ========================================================== -->
        <!-- These are implementation-specific targets for the JBoss 5. -->
        <!-- ========================================================== -->

	<target name="jee:deployDSJBoss5" unless="jboss7" depends="set-paths">
		<copy todir="${jboss.farm.dir}" overwrite="true">
			<fileset dir="src/appserver/jboss">
				<include name="ejbca-ds.xml" />
			</fileset>
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
		<mkdir dir="dist/datasources"/>
		<chmod dir="dist/datasources" includes="*.xml" perm="600" failonerror="false"/>
		<copy todir="${jboss.farm.dir}" overwrite="true" failonerror="false">
			<fileset dir="dist/datasources" includes="**"/>
		</copy>
		<chmod file="${jboss.farm.dir}/ejbca-ds.xml" perm="600"/>
	</target>

        <target name="jee:deployOCSPDSJBoss5" unless="jboss7" depends="set-paths">
                <copy todir="${jboss.farm.dir}" overwrite="true">
                    <fileset dir="src/appserver/jboss">
                        <include name="ocsp-ds.xml"/>
                    </fileset>
                    <filterchain>
                        <expandproperties/>
                    </filterchain>
                </copy>
                <chmod file="${jboss.farm.dir}/ocsp-ds.xml" perm="600"/>
        </target>

        <target name="jee:deployServicesJBoss5" unless="jboss7" depends="set-paths">
            <copy todir="${jboss.farm.dir}" overwrite="true">
                <fileset dir="src/appserver/jboss">
                    <include name="ejbca-mail-service.xml" />
                </fileset>
                <filterchain>
                    <expandproperties />
                </filterchain>
            </copy>
            <chmod file="${jboss.farm.dir}/ejbca-mail-service.xml" perm="600"/>
        </target>

	<target name="jee:web-configureJBoss5" depends="jee:check,detect-tomcatdir" unless="jboss7">
            <echo message="Using JBoss deploy directory ${jboss.farm.dir}"/>
            <!-- If the web.nosslconfigure option was provided, don't deploy the SSL by commenting it out from the deployed file. -->
            <condition property="definitions_away_begin" value="&#x3C;!--">
                <istrue value="${web.nosslconfigure}" />
            </condition>
            <condition property="definitions_away_end" value="-->">
                <istrue value="${web.nosslconfigure}" />
            </condition>
            <property name="definitions_away_begin" value="" />
            <property name="definitions_away_end" value="" />

            <!-- Set dummy value if password is not defined. If defined the old value is kept -->
            <property name="java.trustpassword" value="changeThisToThePassword"/>
            <property name="httpsserver.password" value="changeThisToThePassword"/>

            <!-- Copy the server configuration file to JBoss directory. -->
            <copy todir="${tomcat.dir}" overwrite="true">
                <fileset dir="src/appserver/jboss/${jboss.web}"/>
                <filterchain>
                    <tokenfilter>
                        <replacestring from="@keystore.file@" to="${keystore.file}"/>
                        <replacestring from="@truststore.file@" to="${truststore.file}"/>
                        <replacestring from="@httpsserver.password@" to="${httpsserver.password}"/>
                        <replacestring from="@java.trustpassword@" to="${java.trustpassword}"/>
                        <replacestring from="@httpserver.pubhttp@" to="${httpserver.pubhttp}"/>
                        <replacestring from="@httpserver.pubhttps@" to="${httpserver.pubhttps}"/>
                        <replacestring from="@httpserver.privhttps@" to="${httpserver.privhttps}"/>
                        <replacestring from="@web.contentencoding@" to="${web.contentencoding}"/>
                        <replacestring from="@httpsserver.bindaddress.pubhttp@" to="${httpsserver.bindaddress.pubhttp}"/>
                        <replacestring from="@httpsserver.bindaddress.pubhttps@" to="${httpsserver.bindaddress.pubhttps}"/>
                        <replacestring from="@httpsserver.bindaddress.privhttps@" to="${httpsserver.bindaddress.privhttps}"/>
                        <replacestring from="@definitions_away_begin@" to="${definitions_away_begin}"/>
                        <replacestring from="@definitions_away_end@" to="${definitions_away_end}"/>
                    </tokenfilter>
                </filterchain>
                <filterchain>
                    <expandproperties />
                </filterchain>
            </copy>
            <chmod file="${tomcat.dir}/server.xml" perm="600"/>
            <chmod file="${tomcat.dir}/standalone.xml" perm="600"/>
        </target>

        <!-- Dummy target, we do not support live redeployments with JBoss 5 -->
        <target name="notifyDeploymentScannerJBoss5" depends="set-paths" unless="jboss7" />

        <target name="jee:assert-runJBoss5" unless="jboss7">
		<echo message="Checking that the JEE server is up and running..."/>
		<waitfor maxwait="2" maxwaitunit="second" timeoutproperty="jee.notrunning">
			<http url="http://localhost:${httpserver.pubhttp}/"/>
		</waitfor>
		<fail message="Please start JEE server before running this script" if="jee.notrunning"/>
	</target>

        <!-- ========================================================== -->
        <!-- These are implementation-specific targets for the JBoss 7. -->
        <!-- ========================================================== -->

        <target name="jee:deployServicesJBoss7" depends="set-paths,jee:assert-runJBoss7" if="jboss7">
            <!-- Remove the current definitions. -->
            <jboss:admsilent arg="/subsystem=mail/mail-session=&quot;${mail.jndi-name}&quot;:remove" failonerror="false" />
            <jboss:admsilent arg="/socket-binding-group=standard-sockets/remote-destination-outbound-socket-binding=ejbca-mail-smtp:remove" failonerror="false" />
            <jboss:admsilent arg=":reload" />

            <!-- Construct the parameters for adding the server based on whether we use authentication or not (not specifying the username/password means no authentication). -->
            <condition property="jboss7.ejbca-mail-smtp.params" value="outbound-socket-binding-ref=ejbca-mail-smtp, ssl=${mail.smtp.starttls.enable}, username=${mail.user}, password=${mail.password}" else="outbound-socket-binding-ref=ejbca-mail-smtp, ssl=${mail.smtp.starttls.enable}">
                <equals arg1="${mail.smtp.auth}" arg2="true" />
            </condition>

            <!-- Add new service definitions. -->
            <jboss:adm arg="/socket-binding-group=standard-sockets/remote-destination-outbound-socket-binding=ejbca-mail-smtp:add(port=${mail.smtp.port}, host=${mail.smtp.host})" />
            <jboss:adm arg="/subsystem=mail/mail-session=&quot;${mail.jndi-name}&quot;:add(jndi-name=${mail.jndi-name}" />
            <jboss:adm arg="/subsystem=mail/mail-session=&quot;${mail.jndi-name}&quot;/server=smtp:add(${jboss7.ejbca-mail-smtp.params})" />
            <jboss:admsilent arg=":reload" />
            <!-- This is a workaround since when calling service deployment and reloading, we can get some ugly race conditions. The problem is that :reload is non-blocking operation, and we have no way to figure out if the redeployment is done or not. @TODO: Find a better solution for this. -->
            <sleep seconds="10"/>
        </target>

	<target name="jee:deployDSJBoss7" if="jboss7" depends="set-paths,jee:assert-runJBoss7">
            <!-- We have to undeploy ejbca.ear before removing the datasource, or removal will fail. @TODO: Figure out how to detect if something is deployed or not. -->
            <jboss:admsilent arg="undeploy ejbca.ear --keep-content" failonerror="false" />
            <jboss:admsilent arg="data-source remove --name=ejbcads" failonerror="false" />
            <jboss:adm arg="data-source add --name=ejbcads --driver-name=${database.driver} --connection-url=${database.url} --jndi-name=java:/${datasource.jndi-name} --use-ccm=true --driver-class=${database.driver} --user-name=${database.username} --password=${database.password} --validate-on-match=false --background-validation=false --prepared-statements-cache-size=50 --share-prepared-statements=true --min-pool-size=10 --max-pool-size=10 --pool-prefill=true --transaction-isolation=TRANSACTION_READ_COMMITTED --check-valid-connection-sql=&quot;select 1;&quot;" />
            <!-- If we don't reload now, JBoss AS 7 will get stuck. @TODO: Try this out with JBoss EAP 6, and see if we can report a bug. -->
            <jboss:admsilent arg=":reload" />
            <jboss:admsilent arg="deploy --name=ejbca.ear" failonerror="false" />
        </target>

	<target name="jee:deployOCSPDSJBoss7" if="jboss7" depends="set-paths,jee:assert-runJBoss7" >
            <!-- We have to undeploy ejbca.ear before removing the datasource, or removal will fail. @TODO: Figure out how to detect if something is deployed or not. -->
            <jboss:admsilent arg="undeploy ejbca.ear --keep-content" failonerror="false" />
            <jboss:admsilent arg="data-source remove --name=ocspds" failonerror="false" />
            <jboss:adm arg="data-source add --name=ocspds --driver-name=${ocsp-database.driver} --connection-url=${ocsp-database.url} --jndi-name=java:/${ocsp-datasource.jndi-name} --use-ccm=true --driver-class=${ocsp-database.driver} --user-name=${ocsp-database.username} --password=${ocsp-database.password} --validate-on-match=false --background-validation=false --prepared-statements-cache-size=50 --share-prepared-statements=true --min-pool-size=10 --max-pool-size=10 --pool-prefill=true --transaction-isolation=TRANSACTION_READ_COMMITTED --jta=false --check-valid-connection-sql=&quot;select 1;&quot;" />
            <!-- If we don't reload now, JBoss AS 7 will get stuck. @TODO: Try this out with JBoss EAP 6, and see if we can report a bug. -->
            <jboss:admsilent arg=":reload" />
            <jboss:admsilent arg="deploy --name=ejbca.ear" failonerror="false" />
        </target>

	<target name="notifyDeploymentScannerJBoss7" depends="set-paths" if="jboss7,jee:assert-runJBoss7">
	    <touch file="${jboss.farm.dir}/ejbca.ear.dodeploy" />
	</target>

        <!-- Purges the old web configuration. -->
        <target name="jee:web-configureJBoss7Cleanup" if="jboss7">
            <jboss:admsilent arg="/socket-binding-group=standard-sockets/socket-binding=httpspub:remove" failonerror="false"/>
            <jboss:admsilent arg="/subsystem=web/connector=httpspub:remove" failonerror="false" />
            <jboss:admsilent arg="/socket-binding-group=standard-sockets/socket-binding=httpspriv:remove" failonerror="false" />
            <jboss:admsilent arg="/subsystem=web/connector=httpspriv:remove" failonerror="false" />
            <jboss:admsilent arg="/socket-binding-group=standard-sockets/socket-binding=http:remove" failonerror="false" />
            <jboss:admsilent arg="/subsystem=web/connector=http:remove" failonerror="false" />
            <jboss:admsilent arg="/system-property=org.apache.catalina.connector.URI_ENCODING:remove" />
            <jboss:admsilent arg="/system-property=org.apache.catalina.connector.USE_BODY_ENCODING_FOR_QUERY_STRING:remove" />
            <jboss:admsilent arg=":reload" />
        </target>

        <target name="jee:web-configureJBoss7" depends="jee:check,jee:assert-runJBoss7" if="jboss7">
            <echo message="Setting-up web configration for JBoss 7." />
            <antcall target="jee:web-configureJBoss7Cleanup" />
            <jboss:adm arg="/socket-binding-group=standard-sockets/socket-binding=http:add(port=${httpserver.pubhttp})" />
            <jboss:adm arg="/subsystem=web/connector=http:add(protocol=HTTP/1.1, scheme=http, socket-binding=http)" />
            <jboss:adm arg="/subsystem=web/connector=http:write-attribute(name=redirect-port, value=${httpserver.privhttps})" />
            <jboss:adm arg="/system-property=org.apache.catalina.connector.URI_ENCODING:add(value=${web.contentencoding})" />
            <jboss:adm arg="/system-property=org.apache.catalina.connector.USE_BODY_ENCODING_FOR_QUERY_STRING:add(value=true)" />
            <jboss:adm arg=":reload" />
            <antcall target="jee:web-configureJBoss7SSL" />
        </target>

        <target name="jee:web-configureJBoss7SSL" depends="jee:check" unless="web.nosslconfigure">
            <echo message="Setting-up SSL web configration for JBoss 7." />
            <!-- Set-up the private port which requires client certificate -->
            <jboss:adm arg="/socket-binding-group=standard-sockets/socket-binding=httpspriv:add(port=${httpserver.privhttps})" />
            <jboss:adm arg="/subsystem=web/connector=httpspriv:add(protocol=HTTP/1.1, scheme=https, socket-binding=httpspriv, secure=true)" />
            <jboss:adm arg="/subsystem=web/connector=httpspriv/ssl=configuration:add(key-alias=${httpsserver.hostname})" />
            <jboss:adm arg="/subsystem=web/connector=httpspriv/ssl=configuration:write-attribute(name=password, value=${httpsserver.password})" />
            <jboss:adm arg="/subsystem=web/connector=httpspriv/ssl=configuration:write-attribute(name=certificate-key-file, value=${jboss.server.home.dir}/${keystore.file})" />
            <jboss:adm arg="/subsystem=web/connector=httpspriv/ssl=configuration:write-attribute(name=verify-client, value=true)" />
            <jboss:adm arg="/subsystem=web/connector=httpspriv/ssl=configuration:write-attribute(name=ca-certificate-file, value=${jboss.server.home.dir}/${keystore.file})" />
            <!-- Set-up the public SSL port which doesn't require the client certificate. -->
            <jboss:adm arg="/socket-binding-group=standard-sockets/socket-binding=httpspub:add(port=${httpserver.pubhttps})" />
            <jboss:adm arg="/subsystem=web/connector=httpspub:add(protocol=HTTP/1.1, scheme=https, socket-binding=httpspub, secure=true)" />
            <jboss:adm arg="/subsystem=web/connector=httpspub/ssl=configuration:add(key-alias=${httpsserver.hostname})" />
            <jboss:adm arg="/subsystem=web/connector=httpspub/ssl=configuration:write-attribute(name=password, value=${httpsserver.password})" />
            <jboss:adm arg="/subsystem=web/connector=httpspub/ssl=configuration:write-attribute(name=certificate-key-file, value=${jboss.server.home.dir}/${keystore.file})" />
            <jboss:adm arg="/subsystem=web/connector=httpspub/ssl=configuration:write-attribute(name=ca-certificate-file, value=${jboss.server.home.dir}/${keystore.file})" />
            <!--  Configure WSDL web-host rewriting to use the request host. Needed for webservices to work correctly when requiring client certificate. -->
            <jboss:adm arg="/subsystem=webservices:write-attribute(name=wsdl-host, value=jbossws.undefined.host)" />
            <jboss:adm arg="/subsystem=webservices:write-attribute(name=modify-wsdl-address, value=true)" />
            
            <jboss:adm arg=":reload" />
        </target>

        <target name="jee:assert-runJBoss7" if="jboss7">
            <echo message="Checking if JBoss 7 is up and running..."/>
            <jboss:admsilent arg=":read-attribute(name=server-state)" resultproperty="jboss7.server.status" failonerror="false" />
            <condition property="jboss7.server.isrunning" value="true">
                <equals arg1="${jboss7.server.status}" arg2="0" />
            </condition>
            <fail message="The requested action requires that JBoss 7 is up and running." unless="jboss7.server.isrunning" />
        </target>

        <!-- =================================== -->
        <!-- Implementation-independent targets. -->
        <!-- =================================== -->

        <target name="jee:deploytruststore" depends="set-paths" unless="web.nosslconfigure">
		<!-- copy the truststore file to the server -->
		<available file="${ejbca.home}/p12/truststore.jks" property="truststore.file.present"/>
		<fail message="Missing JKS truststorestore file in '${basedir}/p12/truststore.jks'" unless="truststore.file.present"/>

		<copy file="${ejbca.home}/p12/truststore.jks" tofile="${jboss.server.home.dir}/${truststore.file}" overwrite="true"/>
		<chmod file="${jboss.server.home.dir}/${truststore.file}" perm="600"/>
	</target>

        <target name="jee:keystore" depends="jee:check" unless="web.nosslconfigure">
            <echo message="Using JBoss deploy directory ${jboss.farm.dir}"/>
            <!-- copy the keystore file to the server -->
            <available file="p12/tomcat.jks" property="keystore.file.present"/>
            <fail message="Missing JKS keystore file in '${basedir}/p12/tomcat.jks'" unless="keystore.file.present"/>

            <copy file="p12/tomcat.jks" tofile="${jboss.server.home.dir}/${keystore.file}" overwrite="true"/>
            <chmod file="${jboss.server.home.dir}/${keystore.file}" perm="600"/>

            <!-- Also deploy the truststore -->
            <antcall target="jee:deploytruststore" />
        </target>

        <!-- ================= -->
        <!-- Top-level targets -->
        <!-- ================= -->

	<target name="jee:deploy" depends="jee:deployServices, jee:deployDS, jee:deployOCSPDS, jee:deployear">
	</target>

	<target name="jee:deployear" depends="jee:check">
		<copy todir="${jboss.farm.dir}" overwrite="true">
			<fileset dir="${dist.dir}" includes="ejbca.ear"/>
		</copy>
		<chmod file="${dist.dir}/ejbca.ear" perm="600"/>
	    <antcall target="notifyDeploymentScanner" />
	</target>
	
	<target name="jee:deploy-scep-war" depends="jee:check">
		<chmod dir="dist/datasources" includes="ramessage-ds.xml" perm="600"/>
		<copy todir="${jboss.farm.dir}" overwrite="true" file="dist/datasources/ramessage-ds.xml"/>
		<chmod dir="dist" includes="scepraserver.war" perm="600"/>
		<copy todir="${jboss.farm.dir}" overwrite="true" file="dist/scepraserver.war"/>
	</target>

	<target name="jee:deploy-externalragui-war" depends="jee:check, detect-tomcatdir">
		<chmod dir="dist/externalra-gui" includes="externalragui-ds.xml" perm="600"/>
		<copy todir="${jboss.farm.dir}" overwrite="true" file="dist/externalra-gui/externalragui-ds.xml"/>
		<chmod dir="dist/externalra-gui" includes="externalra-gui.war" perm="600"/>
		<copy todir="${jboss.farm.dir}" overwrite="true" file="dist/externalra-gui/externalra-gui.war"/>
		<chmod dir="dist/externalra-gui" includes="server.xml" perm="600"/>
		<copy todir="${tomcat.dir}" overwrite="true" file="dist/externalra-gui/server.xml"/>
	</target>

	<target name="jee:deployva" depends="set-paths">
                <antcall target="jee:deployDS" />
		<copy todir="${jboss.farm.dir}">
			<fileset dir="${va-dist.dir}" includes="ejbca.ear"/>
		</copy>
		<chmod file="${jboss.farm.dir}/ejbca.ear" perm="600"/>
		<antcall target="notifyDeploymentScanner" />
	</target>

	<target name="jee:run" description="Start the JEE server">
		<jee-server classname="org.jboss.Main" classpath="${appserver.home}/bin/run.jar">
			<args>
				<jvmarg value="-Djboss.home=${appserver.home}"/>
			</args>
		</jee-server>
		<!--
            appserver.home.dir
            appserver.home.url		${appserver.home.dir}
            jboss.server.name		default
            jboss.server.base.dir	${appserver.home.dir}/server	
            jboss.server.home.dir	${jboss.base.dir}/${jboss.server.name}
            jboss.server.temp.dir	${jboss.server.home.dir}/tmp
            jboss.server.data.dir	${jboss.server.home.dir}/data
            jboss.server.base.url	${appserver.home.url}/server
            jboss.server.home.url	${jboss.base.url}/${jboss.server.name}
            jboss.server.config.url ${jboss.server.home.url}/conf
            jboss.server.lib.url	${jboss.server.home.url}/lib
        -->
	</target>

	<target name="jee:debug" description="Start the JEE server in debug mode">
		<property name="jee.debug.transport" value="dt_socket"/>
		<property name="jee.debug.address" value="5005"/>
		<property name="jee.debug.jvm.opts" value="-Xdebug -Xnoagent -Xrunjdwp:transport=${jee.debug.transport},address=${jee.debug.address},server=y,suspend=y"/>
		<echo message="Connect your debugger using transport '${jee.debug.transport}' and address '${jee.debug.address}'"/>
		<antcall target="jee:run"/>
	</target>

        <!-- ================= -->
        <!-- Macro definitions -->
        <!-- ================= -->

	<macrodef name="jee-server">
		<attribute name="classname"/>
		<attribute name="classpath"/>
		<element name="args" optional="yes"/>
		<sequential>
			<property name="jee.debug.jvm.opts" value=""/>
			<available file="${java.home}/../lib/tools.jar" property="jdk.present"/>
			<fail message="Missing tools.jar in ${java.home}/lib. Please use a java JDK" unless="jdk.present"/>
			<java classname="@{classname}" fork="true">
				<classpath path="@{classpath}:${java.home}/../lib/tools.jar"/>
				<jvmarg line="${jee.debug.jvm.opts} -XX:+UseConcMarkSweepGC -XX:MaxPermSize=192m -Xms128m -Xmx512m"/>
				<args/>
			</java>
		</sequential>
	</macrodef>

        <macrodef name="adm" uri="jboss" description="JBoss 7 CLI administration utility convenience wrapper">
          <attribute name="arg" />
          <attribute name="failonerror" default="true" description="Fail the build if command exits with error."/>
          <sequential>
            <echo message="@{arg}"/>
            <exec executable="${appserver.home}/bin/jboss-cli.sh" failonerror="@{failonerror}" spawn="@{nooutput}">
              <arg line="-c --command='@{arg}'" />
            </exec>
          </sequential>
        </macrodef>

        <macrodef name="admsilent" uri="jboss" description="JBoss 7 CLI administration utility convenience wrapper, produces no output">
            <attribute name="arg" />
            <attribute name="failonerror" default="true" description="Fail the build if command exits with error."/>
            <attribute name="resultproperty" default="admsilent.throwaway.result" description="Name of the property where the exit code should be stored at." />
            <sequential>
                <echo message="@{arg}"/>
                <exec executable="${appserver.home}/bin/jboss-cli.sh" failonerror="@{failonerror}" spawn="@{nooutput}" outputproperty="admsilent.throwaway.output" resultproperty="@{resultproperty}">
                    <arg line="-c --command='@{arg}'" />
                </exec>
            </sequential>
        </macrodef>
        
        <macrodef name="admout" uri="jboss" description="JBoss 7 CLI administration utility convenience wrapper which also captures the output">
            <attribute name="arg" />
            <attribute name="failonerror" default="true" description="Fail the build if command exits with error."/>
            <attribute name="outputproperty" />
            <sequential>
                <echo message="@{arg}"/>
                <exec executable="${appserver.home}/bin/jboss-cli.sh" outputproperty="@{outputproperty}" failonerror="@{failonerror}">
                    <arg line="-c --command='@{arg}'" />
                </exec>
            </sequential>
        </macrodef>
        
</project>

