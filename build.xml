<!DOCTYPE project [
      <!ENTITY propertiesAndPaths SYSTEM "propertiesAndPaths.xmli">
      <!ENTITY compile SYSTEM "compile.xmli">
    ]>  
    
<project name="ejbca" default="build" basedir=".">

	<!-- include the standard properties and paths -->
    &propertiesAndPaths;
	<!-- include the main compile targets -->
	&compile;

	<import file="bin/${appserver.type}.xml" />
	<import file="./cmptcp.xmli" />
	<import file="./test.xmli" />
	<import file="./docs.xmli" />
	

    <!-- =================================================================== -->
    <!-- Clover stuff                                                        -->
    <!-- =================================================================== -->
	<taskdef resource="cloverlib.xml" classpath="/home/hudson/clover/clover-ant-2.5.0/lib/clover.jar"/>
		
	<target name="-check.clover">
	<available property="clover.installed"
	classname="com.cenqua.clover.CloverInstr" />
	</target>

	<target name="guard.noclover" depends="-check.clover" unless="clover.installed">
	<fail message="The target you are attempting to run requires Clover, which doesn't appear to be installed"/>
	</target>
	
	<target name="with.clover">
	        <clover-setup>
	            <fileset dir="${src}">
	                <exclude name="**/org/apache/**/*.java"/>
	            	<exclude name="**/com/novosec/**/*.java"/>
	            </fileset>
	        </clover-setup>
	     </target>

	<target name="clover.xml">
	    <clover-report>
	       <current outfile="coverage.xml">
	          <format type="xml"/>
	       </current>
	    </clover-report>
	 </target>
	
	<target name="clover.html">
		<clover-html-report outdir="clover_html"
		                        title="EJBCA"/>
	 </target>

	
    <!-- =================================================================== -->
    <!-- Build ALL                                                           -->
    <!-- =================================================================== -->
    <target name="build" depends="testforgnujava, ejbca.ear, ejbca-ejb-cli" description="Compiles EJBCA, developers can run with '-Dno-xdoc=true' for faster build"/>

	<!--
	  EJBCA need to be run before the app.server (or the webapp) is fully ssl configured with the keystore
	  So we are 'bootstrapping' it, the 'j2ee.web-noconfigure' property will skip all the serverside
	  -->
    <target name="bootstrap" depends="testforgnujava" description="Bootstrap EJBCA application">
        <ant target="deploy">
        	<reference refid="clover.files"/>
        	<reference refid="clover.useclass.files"/>
        	<property name="j2ee.web-noconfigure" value="true"/>
        </ant>
    </target>

	<!--
	  Installs EJBCA by creating an initial CA, configuring the web container and generating certs for
	  SSL and the super administrator.
	  -->
    <target name="install" depends="ejbca-ejb-cli" description="Install EJBCA application (only once)">
        <ant dir="${ejbca.home}/bin" antfile="cli.xml" target="ejbca:install" />
    </target>
	
    <target name="javatruststore" depends="testforgnujava" description="Install RootCA ceritficate in Java trust store (can be run wih -Dca.name=FooCA -Dtrust.keystore=trust.jks -Dtrust.password=foo123)">
        <ant dir="${ejbca.home}/bin" antfile="cli.xml" target="ejbca:javatruststore" />
        <antcall target="j2ee:deploytruststore" />
    </target>

    <!-- =================================================================== -->
    <!-- Compile ocsp resonder java sources                                  -->
    <!-- =================================================================== -->
    <target name="ocsp-compile" depends="ejbca-util.jar, ocsp-entity, ocsp-ejb-interface">
    	<echo message="THIS TARGET (ocsp-compile) SHOULD NO LONGER BE USED!"/>
    </target>

    <!-- =================================================================== -->
	<!-- Make sure the user isn't using the GNU version of java              -->
    <!-- =================================================================== -->
	<target name="testforgnujava">
		<exec executable="java" outputproperty="testforgnujava.temp">
			<arg value="-version" />
		</exec>

		<fail>
			<condition>
				<contains string="${testforgnujava.temp}" substring="gij" />
			</condition>
			..
			You are currently using the GNU version of JAVA. Please install the version from Sun
			or make sure that the Sun version of java is in the path. If this was run using 'sudo'
			or 'su', make sure that the superuser has the correct path too.
		</fail>
	</target>
	
    <!-- =================================================================== -->
	<!-- Dont allow deploy of the wrong thing in production                   -->
    <!-- =================================================================== -->
    <target name="failinproduction-ca">
		<fail message="You cannot deploy EJBCA as a CA reponder in a OCSP production environment.">
			<condition>
				<equals arg1="${ejbca.productionmode}" arg2="ocsp" casesensitive="false"/>
			</condition>
		</fail>
    </target>

    <target name="failinproduction-ocsp">
		<fail message="You cannot deploy EJBCA as a OCSP Responder in a CA production environment.">
			<condition>
				<equals arg1="${ejbca.productionmode}" arg2="ca" casesensitive="false"/>
			</condition>
		</fail>
    </target>

    <!-- =================================================================== -->
    <!-- Build doc part                                                                                                                             -->
    <!-- =================================================================== -->
    <target name="doc.war" if="doc.war.enabled">
    	<antcall target="doc" />
		<war destfile="${docwar}" webxml="${mainsrc}/publicweb/empty_webxml.xml">
            <fileset dir="${doc.src}" />
        </war>
    </target>
	
    <!-- =================================================================== -->
    <!-- Build sampleauth part                                               -->
    <!-- =================================================================== -->
    <target name="sampleauth.war" depends="compile">
        <war destfile="${sampleauthwar}" webxml="${sampleauth.src}/WEB-INF/web.xml">
            <fileset dir="${sampleauth.src}" excludes="WEB-INF/web.xml" />
        </war>
    </target>
    
    <!-- =================================================================== -->
    <!-- Build ca ejb part                                                    -->
    <!-- =================================================================== -->
    <target name="ejbca-ejb.jar" depends="jbosscmptcpclasspath">
    	<ant antfile="build.xml" dir="modules" target="ejbca-ejb" />
    </target>
	
        <!-- =================================================================== -->
        <!-- Build ejbca util part                                                    -->
        <!-- =================================================================== -->
        <target name="ejbca-util.jar" description="Creates ejbca util classes for use in other projects.jar">
        	<ant antfile="build.xml" dir="modules" target="ejbca-util" />
        </target>    	
	
    
    <!-- =================================================================== -->
    <!-- Build ocsp ejb part                                                    -->
    <!-- =================================================================== -->
    <target name="ocsp-jar">
    	<ant antfile="build.xml" dir="modules" target="ocsp-ejb" />
    </target>

    <!-- =================================================================== -->
    <!-- We need special handling of JSF jars and classpath because          -->
    <!-- different appservers and different JSF implementations behaves differently. -->
	<!-- JBoss does not need anything, because it uses Myfaces by default    -->
    <!-- =================================================================== -->
	<target name="webspheretargetcheck">
			<condition property="websphere.enabled">
				<equals arg1="${appserver.type}" arg2="websphere"/>
			</condition>
	</target>
	<target name="wlstargetcheck">
			<condition property="weblogic.enabled">
				<equals arg1="${appserver.type}" arg2="weblogic"/>
			</condition>
	</target>
	<target name="oc4jtargetcheck">
			<condition property="oc4j.enabled">
				<equals arg1="${appserver.type}" arg2="oracle"/>
			</condition>
	</target>
	<target name="glassfishtargetcheck">
			<condition property="glassfish.enabled">
				<equals arg1="${appserver.type}" arg2="glassfish"/>
			</condition>
	</target>
	<target name="jboss50targetcheck">
			<condition property="jboss50.enabled">
                <and>
				  <equals arg1="${appserver.type}" arg2="jboss"/>
                  <available file="${jboss.deploy.dir}/jbossweb.sar" type="dir"/>
                </and>
			</condition>
	</target>
	<target name="jboss42targetcheck">
			<condition property="jboss42.enabled">
                <and>
				  <equals arg1="${appserver.type}" arg2="jboss"/>
                  <available file="${jboss.deploy.dir}/jboss-web.deployer" type="dir"/>
                </and>
			</condition>
	</target>
	<target name="jboss40targetcheck">
			<condition property="jboss40.enabled">
                <and>
				  <equals arg1="${appserver.type}" arg2="jboss"/>
	              <not>
                  <available file="${jboss.deploy.dir}/jboss-web.deployer" type="dir"/>
                  </not>
                </and>
			</condition>
	</target>
	
	<!-- We need to include all the myfaces libs in Weblogic 9 -->	
	<target name="jsflibswls" depends="wlstargetcheck" if="weblogic.enabled">
		<echo>Weblogic JSF target</echo>
        <copy todir="${jsf.libdir}">
            <fileset dir="${lib}/myfaces" >
            	<include name="*.jar"/>
            </fileset>
        </copy>
	    <copy todir="${jsf.libdir}">
	        <fileset dir="${lib}" >
	        	<include name="commons-*.jar"/>
	        </fileset>
	    </copy>
        <property name="jar.jsfclasspath" value="lib/jstl-1.1.0.jar lib/myfaces-api-1.1.5.jar lib/myfaces-impl-1.1.5.jar lib/commons-logging.jar lib/commons-digester-1.8.jar lib/commons-el-1.0.jar lib/commons-beanutils.jar lib/commons-codec-1.3.jar lib/commons-collections-3.2 lib/commons-io-1.3.2.jar" />
        <property name="jar.jsftaglibs" value="tomahawk-1.1.6.jar,myfaces-impl-1.1.5.jar,jstl-1.1.0.jar" />
	</target>

	<!-- We need to include all the myfaces libs in Oc4j -->	
	<target name="jsflibsoc4j" depends="oc4jtargetcheck" if="oc4j.enabled">
		<echo>OC4J JSF target</echo>
        <copy todir="${jsf.libdir}">
            <fileset dir="${lib}/myfaces" >
            	<include name="*.jar"/>
            </fileset>
        </copy>
	    <copy todir="${jsf.libdir}">
	        <fileset dir="${lib}" >
	        	<include name="commons-*.jar"/>
	        </fileset>
	    </copy>
        <property name="jar.jsfclasspath" value="lib/jstl-1.1.0.jar lib/myfaces-api-1.1.5.jar lib/myfaces-impl-1.1.5.jar lib/commons-logging.jar lib/commons-digester-1.8.jar lib/commons-el-1.0.jar lib/commons-beanutils.jar lib/commons-codec-1.3.jar lib/commons-collections-3.2 lib/commons-io-1.3.2.jar" />
        <property name="jar.jsftaglibs" value="tomahawk-1.1.6.jar,myfaces-impl-1.1.5.jar,jstl-1.1.0.jar" />
	</target>

	<!-- We need to include commons on the classpath for Glassfish -->	
	<target name="jsflibsglassfish" depends="glassfishtargetcheck" if="glassfish.enabled">
		<echo>Glassfish JSF target</echo>
	    <copy todir="${jsf.libdir}">
	        <fileset dir="${lib}" >
	        	<include name="commons-*.jar"/>
	        </fileset>
	    </copy>
        <property name="jar.jsfclasspath" value="lib/commons-logging.jar lib/commons-digester-1.8.jar lib/commons-el-1.0.jar lib/commons-beanutils.jar lib/commons-codec-1.3.jar lib/commons-collections-3.2 lib/commons-io-1.3.2.jar" />
	</target>
	
	<target name="jsflibspre">
        <delete dir="${jsf.libdir}" />
        <mkdir dir="${jsf.libdir}" />
	</target>
	
	<target name="jsflibs" depends="jsflibspre,jsflibswls,jsflibsglassfish,jsflibsoc4j">
        <property name="jar.jsfclasspath" value="" />
        <property name="jar.jsftaglibs" value="tomahawk-1.1.6.jar" />
	</target>

    <!-- =================================================================== -->
    <!-- Build CA-ear                                                        -->
    <!-- =================================================================== -->
	<target name="ejbca.ear" depends="ca.ear">
	</target>
	
	<target name="ca.ear" depends="jsflibs, publicweb.war, renew.war, scep.war, webdist.war, status.war, cmp.war, healthcheck.war, adminweb.war, ejbca-ejb.jar, ejbca-util.jar, ejbcaws.war, ejbcaws.client, xkms.war, xkms.client, doc.war, externalra-service">
		<!-- Make sure we have an application.xml since we don't do preprocessing any longer.. -->
		<mkdir dir="${eardd.src}/META-INF"/>
		<copy todir="${eardd.src}/META-INF" file="src/deploy/ear/META-INF/application.xml" flatten="true" failonerror="true"/>
		<condition property="doc.war.enabled.replace-string" else="!--@doc.war@-->" value="module>&lt;web>&lt;web-uri>doc.war&lt;/web-uri>&lt;context-root>/${app.name}/doc&lt;/context-root>&lt;/web>&lt;/module>">
			<istrue value="${doc.war.enabled}"/>
		</condition>
    	<replace file="${eardd.src}/META-INF/application.xml" token="!--@doc.war@-->" value="${doc.war.enabled.replace-string}"/>
		<condition property="ejbcaws.enabled.replace-string" else="!--@ejbcaws.war@-->" value="module>&lt;web>&lt;web-uri>ejbcaws.war&lt;/web-uri>&lt;context-root>/${app.name}/ejbcaws&lt;/context-root>&lt;/web>&lt;/module>">
			<istrue value="${ejbcaws.enabled}"/>
		</condition>
    	<replace file="${eardd.src}/META-INF/application.xml" token="!--@ejbcaws.war@-->" value="${ejbcaws.enabled.replace-string}"/>
		<condition property="xkms.enabled.replace-string" else="!--@xkms.war@-->" value="module>&lt;web>&lt;web-uri>xkms.war&lt;/web-uri>&lt;context-root>/${app.name}/xkms&lt;/context-root>&lt;/web>&lt;/module>">
			<istrue value="${xkms.enabled}"/>
		</condition>
    	<replace file="${eardd.src}/META-INF/application.xml" token="!--@xkms.war@-->" value="${xkms.enabled.replace-string}"/>
		<condition property="renew.enabled.replace-string" else="!--@renew.war@-->" value="module>&lt;web>&lt;web-uri>renew.war&lt;/web-uri>&lt;context-root>/${app.name}/renew&lt;/context-root>&lt;/web>&lt;/module>">
			<istrue value="${web.renewalenabled}"/>
		</condition>
		<replace file="${eardd.src}/META-INF/application.xml" token="!--@renew.war@-->" value="${renew.enabled.replace-string}"/>
		<!-- Specify that we will use a specific WS implementatio -->
		<mkdir dir="${eardd.src}/META-INF/services"/>
		<copy todir="${eardd.src}/META-INF/services" file="src/deploy/ear/META-INF/services/javax.xml.soap.MetaFactory" flatten="true" failonerror="true"/>
		<!-- Build the EAR -->
        <ear destfile="${caear}" appxml="${eardd.src}/META-INF/application.xml"> 
            <fileset dir="${eardd.src}">
                <exclude name="META-INF/application.xml" />
            </fileset>
            <fileset dir=".">
                <include name="${lib}/bcmail-jdk${java.ver}-145.jar" />
                <include name="${lib}/bcprov-jdk${java.ver}-145.jar" />
                <include name="${lib}/bctsp-jdk${java.ver}-145.jar" />
                <include name="${lib}/cert-cvc.jar" />
                <include name="${lib}/log4j.jar" />
                <include name="${lib}/ldap.jar" />
                <include name="${lib}/commons-*.jar" />
                <include name="${lib}/batik/*.jar" />
                <include name="${lib}/xmlsign/xmlsec-1.3.0.jar" />
			    <include name="${lib}/reports/jasperreports-1.3.3.jar" />
			    <include name="${lib}/reports/jfreechart-1.0.0.jar" />
			    <include name="${lib}/reports/jcommon-1.0.8.jar" />
            </fileset>
            <fileset dir="${dist.dir}">
                <include name="*-ejb.jar" />
                <include name="*.war" />
            </fileset>
            <fileset dir="modules/dist">
                <include name="ejbca-ejb.jar" />
                <include name="ejbcaws.war" />
                <include name="xkms.war" />
                <include name="adminweb.war" />
                <include name="cmp.war" />
                <include name="publicweb.war" />
                <include name="scep.war" />
                <include name="healthcheck.war" />
                <include name="webdist.war" />
                <include name="ocsp.war" />
                <include name="renew.war" />
            </fileset>
            <fileset dir="${jsf.dir}">
                <include name="lib/*.jar" />
            </fileset>
        	<zipfileset prefix="lib" dir="modules/dist">
                <include name="externalra-service.jar" />
                <include name="ejbca-ejb3-interface.jar" />
                <include name="ejbca-entity.jar" />
        	</zipfileset>
        	<zipfileset prefix="lib" dir="dist">
                <include name="ejbca-util.jar" />
        	</zipfileset>
        	<!-- Include PrimeCard HSM libraries. TODO: Test that this works. Previously the classes were included in ejbca-ejb.jar.. -->
        	<zipfileset prefix="lib" dir="${hwtoken.class.dir}">
                <include name="*.jar" />
        	</zipfileset>
	</ear>

    <antcall target="signjar">
        <param name="signjar.file" value="${caear}"/>
    </antcall>
    </target>

    <!-- =================================================================== -->
    <!-- Build OCSP-ear                                                        -->
    <!-- =================================================================== -->
    <target name="ocsp-ear" depends="ocsp-war, ocsp-jar, ocsphealthcheck.war">
        <mkdir dir="${ocsp-dist.dir}"/>
        <ear destfile="${ocspear}" appxml="src/deploy/ocsp-ear/META-INF/application.xml"> 
            <fileset dir=".">
                <include name="${lib}/bcmail-jdk${java.ver}-145.jar" />
                <include name="${lib}/bcprov-jdk${java.ver}-145.jar" />
                <include name="${lib}/cert-cvc.jar" />
                <include name="${lib}/log4j.jar" />
                <include name="${lib}/ldap.jar" />
                <include name="${lib}/commons-lang-*.jar" />
                <include name="${lib}/commons-collections-3.2.jar" />
                <include name="${lib}/commons-fileupload-1.0.jar" />
                <include name="${lib}/commons-configuration-1.5.jar" />
            </fileset>
            <fileset dir="modules/dist">
                <include name="healthcheck.war" />
                <include name="ocsp.war" />
                <include name="ocsp-ejb.jar" />
            </fileset>
        	<zipfileset prefix="lib" dir="modules/dist">
                <include name="ocsp-ejb3-interface.jar" />
                <include name="ocsp-entity.jar" />
        	</zipfileset>
        	<zipfileset prefix="lib" dir="dist">
                <include name="ejbca-util.jar" />
        	</zipfileset>
	</ear>
    </target>
	
    <!-- =================================================================== -->
    <!-- Build Javadoc part                                                  -->
    <!-- =================================================================== -->
    <target name="javadoc" description="Build JavaDoc for all modules">
        <mkdir dir="${apidoc}" />
    	<path id="javadoc-dependencies.classpath">
    		<fileset dir="${lib}" includes="**/*.jar"/>
    	</path>
    	<!-- extdirs="${lib}" -->
        <javadoc packagenames="org.ejbca.*" maxmemory="256m" destdir="${apidoc}" classpathref="javadoc-dependencies.classpath" 
        	author="true" version="true" use="true" windowtitle="EJBCA API" bottom="Copyright &#169; PrimeKey Solutions AB." >
        	<sourcepath location="${src.java}"/>
        	<sourcepath location="${src.gen}"/>
           	<sourcepath location="modules/externalra-scep/src"/>
           	<sourcepath location="modules/externalra/src"/>
           	<sourcepath location="modules/ejbca-xkms/src"/>
           	<sourcepath location="modules/ejbca-ws-cli/src"/>
           	<sourcepath location="modules/ejbca-ws-cli/src-gen"/>
           	<sourcepath location="modules/ejbca-ws/src"/>	<!-- ECA-1396 will probably change this.. -->
           	<sourcepath location="modules/ejbca-ejb-cli/src"/>
           	<sourcepath location="modules/clientToolBox/src"/>
           	<sourcepath location="modules/cmpProxy/src"/>
           	<sourcepath location="modules/ejbca-entity/src"/>
        	<!-- Surpress XDoclet warnings. This should be removed to EJBCA 4.0 -->
        	<tag name="ejb.bean" enabled="no"/>
        	<tag name="ejb.create-method" enabled="no"/>
        	<tag name="ejb.ejb-external-ref" enabled="no"/>
	    	<tag name="ejb.env-entry" enabled="no"/>
        	<tag name="ejb.finder" enabled="no"/>
        	<tag name="ejb.home" enabled="no"/>
        	<tag name="ejb.interface" enabled="no"/>
        	<tag name="ejb.interface-method" enabled="no"/>
        	<tag name="ejb.permission" enabled="no"/>
        	<tag name="ejb.persistence" enabled="no"/>
        	<tag name="ejb.pk" enabled="no"/>
        	<tag name="ejb.pk-field" enabled="no"/>
        	<tag name="ejb.relation" enabled="no"/>
        	<tag name="ejb.transaction" enabled="no"/>
	    	<tag name="jonas.jdbc-mapping" enabled="no"/>
	    	<tag name="jonas.bean" enabled="no"/>
	    	<tag name="jboss.method-attributes" enabled="no"/>
	    	<tag name="jboss.target-relation" enabled="no"/>
	    	<tag name="weblogic.enable-call-by-reference" enabled="no"/>
	    	<tag name="weblogic.target-column-map" enabled="no"/>
	    	<tag name="sunone.relation" enabled="no"/>
        </javadoc>
    	<echo message=""/>
    	<dirname file="${apidoc}/index.html" property="javadoc.dir"/>
    	<echo message="EJBCA API is available in file://${javadoc.dir}/index.html"/>
    </target>

    <!-- ========================================================================== -->
    <!-- Upgrades the database for a new version of ejbca                           -->
    <!-- ========================================================================== -->
    <target name="base-upgrade" depends="ejbca-ejb-cli">
        <!-- Get input -->
        <input message="Which version of EJBCA are you upgrading from:" addproperty="ejbca.upgradefromversion"
        	validargs="3.2.x,3.3.x,3.4.x,3.5.x,3.6.x,3.7.x,3.8.x,3.9.x,3.10.x"/> 
        <java dir="${ejbca.home}" jar="${ejbca.home}/dist/ejbca-ejb-cli/ejbca-ejb-cli.jar" fork="true">
            <arg line="upgrade ${database.name} ${ejbca.upgradefromversion} ${upgrade.post}"/>
        </java>
    </target>
    <target name="set-upgrade">
        <property name="upgrade.post" value=""/>
    </target>
    <target name="set-post-upgrade">
        <property name="upgrade.post" value="*"/>
    </target>
    <target name="upgrade" depends="set-upgrade,base-upgrade"/>
    <target name="post-upgrade" depends="set-post-upgrade,base-upgrade"/>

    <!-- =================================================================== -->
    <!-- Build Signing log4j log appended for JBoss                          -->
    <!-- =================================================================== -->
    <target name="jbosslogsigning" depends="compile">
        <path id="jbosslogsigning.classpath">
        </path>
        <javac srcdir="${src.java}" extdirs="${lib}" destdir="${build}" debug="on" encoding="iso8859-1">
            <exclude name="**/CVS/**" />
            <include name="**/appserver/jboss/SigningDailyRollingFileAppender*" />
            <include name="**/appserver/jboss/ScriptrunningDailyRollingFileAppender*" />
            <include name="**/appserver/jboss/RollingCalendar*" />
            <include name="**/appserver/jboss/SignerThread*" />
            <include name="**/appserver/jboss/ScriptThread*" />
            <!-- appserver specific files are built separtely-->
            <classpath refid="jbosslogsigning.classpath" />
            <classpath refid="compile.classpath" />
        </javac>

        <mkdir dir="${logsigning.build}" />
        <copy todir="${logsigning.build}">
            <fileset dir="${build}">
                <include name="org/ejbca/appserver/jboss/SigningDailyRollingFileAppender*.class" />
                <include name="org/ejbca/appserver/jboss/ScriptrunningDailyRollingFileAppender*.class" />
                <include name="org/ejbca/appserver/jboss/RollingCalendar.class" />   
                <include name="org/ejbca/appserver/jboss/SignerThread.class" />   
                <include name="org/ejbca/appserver/jboss/ScriptThread.class" />   
                <include name="org/ejbca/util/CertTools*.class" />
                <include name="org/ejbca/util/FileTools*.class" />
                <exclude name="se/anatom/ejbca/**/*Test*" />
            </fileset>
        </copy>
        <jar basedir="${logsigning.build}" jarfile="${logsigningjar}">
            <manifest>
                <!-- <attribute name="Class-Path" value="${jar.extclasspath}" /> -->
            </manifest>
        </jar>
    </target>
	
    <!-- =================================================================== -->
    <!-- Create Log4j ErrorHandler and appender                              -->
    <!-- =================================================================== -->
	<target name="jbosslog4jsafer" depends="compile">
	        <path id="jbosslog4jsafer.classpath">
	        </path>
	        <javac srcdir="${src.java}" extdirs="${lib}" destdir="${build}" debug="on" encoding="iso8859-1">
	            <exclude name="**/CVS/**" />
	            <include name="**/appserver/jboss/SaferDailyRollingFileAppender*" />
	            <include name="**/appserver/jboss/ProbeableErrorHandler*" />
	        	<include name="**/protocol/ocsp/ISaferAppenderListener*" />
	            <!-- appserver specific files are built separtely-->
	            <classpath refid="jbosslog4jsafer.classpath" />
	            <classpath refid="compile.classpath" />
	        </javac>

	        <mkdir dir="${jbosslog4jsafer.build}" />
	        <copy todir="${jbosslog4jsafer.build}">
	            <fileset dir="${build}">
	                <include name="org/ejbca/appserver/jboss/SaferDailyRollingFileAppender.class" />
	                <include name="org/ejbca/appserver/jboss/ProbeableErrorHandler.class" />
	            	<include name="org/ejbca/core/protocol/ocsp/ISaferAppenderListener.class" />
	                <exclude name="se/anatom/ejbca/**/*Test*" />
	            </fileset>
	        </copy>
	        <jar basedir="${jbosslog4jsafer.build}" jarfile="${jbosslog4jsaferjar}">
	            <manifest>
	                <!-- <attribute name="Class-Path" value="${jar.extclasspath}" /> -->
	            </manifest>
	        </jar>
	    </target>
	

    <!-- ======================================================================= -->
    <!-- Promts for password properties if not previously set.                   -->
	<!-- Note: This code is duplicated in cli.xml								 -->
	<!-- Ask the following only at deploy, not at bootstrap						 -->
    <!-- ======================================================================= -->
	<target name="inputBootstrapAndDeployPasswords" >
		<input message="Please enter the password to the database. A blank password works for hsqldb." addproperty="database.password" defaultvalue="">
			<handler classname="org.apache.tools.ant.input.SecureInputHandler" />
		</input>
	</target>
	
	
    <!-- ======================================================================= -->
    <!-- Promts for password properties if not previously set.                   -->
	<!-- Note: This code is duplicated in cli.xml								 -->
	<!-- Ask the following only at deploy, not at bootstrap						 -->
    <!-- ======================================================================= -->
	<target name="inputDeployPasswords" unless="j2ee.web-noconfigure">
		<input message="Please enter the password of the truststore with the CA certificate for https?" addproperty="java.trustpassword" defaultvalue="changeit">
			<handler classname="org.apache.tools.ant.input.SecureInputHandler" />
		</input>
		<input message="Please enter the password of the keystore with the TLS key for https" addproperty="httpsserver.password" defaultvalue="serverpwd">
			<handler classname="org.apache.tools.ant.input.SecureInputHandler" />
		</input>
	</target>
	
    <!-- ======================================================================= -->
    <!-- Deploy EJBCA ear to JBoss                                               -->
    <!-- ======================================================================= -->
    <target name="deploy" depends="failinproduction-ca,build, buildwithcmptcpservice,inputDeployPasswords,inputBootstrapAndDeployPasswords" description="Deploy the main EJBCA application">
    	<antcall target="j2ee:deploy" />
        <antcall target="showtime" />
    </target>
    <target name="ocsp-deploy" depends="failinproduction-ocsp,ocsp-ear,inputDeployPasswords,inputBootstrapAndDeployPasswords" description="Deploy the standalone OCSP reponder" >
        <antcall target="j2ee:deployocsp" />
        <antcall target="showtime" />
    </target>

    <!-- ======================================================================= -->
    <!-- Macro for test/pre-compiling JSP web pages    -->
    <!-- ======================================================================= -->
    <macrodef name="jsp-compile">
        <attribute name="uriroot"/>
        <attribute name="todir" default="@{uriroot}"/>
        <sequential>
		    <path id="jasper.classpath">
		        <fileset dir="${ejbca.home}/lib/jasper" includes="*.jar"/>
		        <path refid="compile.classpath"/>
		        <path location="${build}"/>
		    </path>
		    <property name="jasper.classpath" refid="jasper.classpath"/>
	        <!-- loadderref is essential here ,otherwise this taskdef can not be called twice -->
			<taskdef name="jasper2" classname="org.apache.jasper.JspC" 
				classpathref="jasper.classpath"
				loaderref="jasper"/>
	        <mkdir dir="@{todir}/WEB-INF/jspc"/>
	        <!--echo message="jasper.classpath = ${jasper.classpath}"/-->
			<jasper2 uriroot="@{uriroot}"
				package="org.apache.jasper.jspc"
				outputdir="@{todir}/WEB-INF/jspc"
				validatexml="false"
				webXmlFragment="@{todir}/WEB-INF/generated_web.xml"
				addWebXmlMappings="true"
	            verbose="0"
	            classpath="${jasper.classpath}"/>
			<!--
			  Compile them cleanly, jasper is not nice for this so use javac directly
			  Note that precompilation may not work with weblogic (see weblogic docs)
			  -->
			<mkdir dir="@{todir}/WEB-INF/classes"/>
			<depend srcdir="@{todir}/WEB-INF/jspc" destdir="@{todir}/WEB-INF/classes">
				<classpath refid="jasper.classpath"/>
			</depend>
			<javac srcdir="@{todir}/WEB-INF/jspc" destdir="@{todir}/WEB-INF/classes" debug="on"
	            includeantruntime="no" encoding="iso8859-1">
	            <classpath refid="jasper.classpath"/>
	        </javac>
        </sequential>
    </macrodef>    
	
    <!-- ======================================================================= -->
    <!-- Make a ZIP release file of EJBCA, and a SHA1 checksum of the release    -->
	<!-- The ZIP file contains all the files used, but not temporary or compile files etc -->
    <!-- ======================================================================= -->
	<target name="ziprelease" description="Make a zip file for EJBCA release">
		<antcall target="clean" />

	<!-- A small script that converts the version x.y.z to x_y_z to be used in the file. JavaScript does not work under Java 1.5. -->
	<scriptdef name="convertdot" language="javascript">
	    <![CDATA[
          ver = project.getProperty("app.version.number");
		  relstring = ver.replace('.','_');
	      //self.log(ver);
	      //self.log(relstring);
		  project.setProperty("ejbca.zipversion", relstring);
          str = project.getProperty("ejbca.zipversion");
	    ]]>
    </scriptdef>
		
		<antcall target="update-svnrev" /> <!-- update svn revision version property -->
		<convertdot/> <!-- convert dots to underscores in version string -->
        <!-- <input message="Version tag for zipfile (ex 3_2_1):" addproperty="ejbca.zipversion" /> -->
		<zip destfile="../ejbca_${ejbca.zipversion}.zip">
		    <zipfileset dir="." prefix="ejbca_${ejbca.zipversion}" filemode="600" dirmode="700"> 
		    	<include name="**/**" />
		    	<exclude name="**/CVS/**" />
		    	<exclude name="tmp/**" />
		    	<exclude name="dist/**" />
		    	<exclude name="ocsp-dist/**" />
		    	<exclude name="bin/META_INF/**" />
		    	<exclude name="out/**" />
		    	<exclude name="p12*/**" />
		    	<exclude name="hwtoken/**" />
		        <exclude name="ocspHardTokenClasses/**" />
		    	<exclude name="**/*.class" />
		    	<exclude name=".classpath" />
		    	<exclude name=".project" />
		    	<exclude name="**/.cvsignore" />
		    	<exclude name="**/ejbca.properties" />
		    	<exclude name="conf/*.properties" />
		    	<exclude name="conf/logdevices/*.properties" />
		    	<exclude name="**/*.sh" />
		    	<exclude name="**/jndi.properties" />
		    	<exclude name="**/hs_err*" />
		    </zipfileset>
		    <zipfileset dir="." prefix="ejbca_${ejbca.zipversion}" filemode="700" dirmode="700"> 
		    	<include name="**/*.sh" />
		    </zipfileset>
		    <zipfileset dir="." prefix="ejbca_${ejbca.zipversion}" filemode="600" dirmode="700">
		    	<include name="conf/extendedkeyusage.properties" />		    	
		    </zipfileset>
		</zip>
        <antcall target="signjar">
            <param name="signjar.file" value="../ejbca_${ejbca.zipversion}.zip"/>
        </antcall>
        <checksum file="../ejbca_${ejbca.zipversion}.zip" algorithm="SHA1" forceOverwrite="yes"/>      
        <checksum file="../ejbca_${ejbca.zipversion}.zip" algorithm="SHA1" property="ejbcaSHA1"/>      
        <echo message="SHA1 checksum: ${ejbcaSHA1}" />
	</target>

    <!-- ======================================================================= -->
    <!-- Display application version string                                      -->
    <!-- ======================================================================= -->
	<target name="ejbcaversion" description="Output application version string.">
		<echo>${app.version}</echo>
	</target>

    <!-- ======================================================================= -->
    <!-- Target updating svn revision string in propertiesAndPaths.xml           -->
    <!-- ======================================================================= -->
	<target name="update-svnrev" description="Updates propertiesAndPaths.xmli file with current trunk SVN revision">
		<echo>Trying to update src/internal.properties with SVN revision of COMMITTED.</echo>
        <property name="revision" value="COMMITTED"/>	
		
        <!-- find out svn.revision of HEAD, need svn.exe installed on local machine will end up in property ${Revision} -->
        <exec executable="svn" output="svnlog.out">
            <arg line="info -r ${revision}"/>
        </exec>
		<loadproperties srcFile="svnlog.out">
		      <filterchain>
		        <linecontains>
		          <contains value="Revision"/>
		        </linecontains>
		      </filterchain>
		</loadproperties>
		<delete file="svnlog.out"/>
		<antcall target="update-svnrev-updatefile" /> <!-- do update of file only if property is set -->
    </target>

	<target name="update-svnrev-updatefile" if="Revision">
		<replaceregexp file="src/internal.properties" encoding="UTF-8" match='(svn.revision=).*'
			replace='\1r${Revision}' />
		<echo>Updated "svn.revision" to: r${Revision}</echo>
    </target>
	
     
	<!--
        Target for signing a JAR (JAR, EAR, WAR or ZIP)
        parameter: signjar.file=file to sign 
	-->
    <target name="signjar">
        <available file="${signjar.keystore}" property="signjar.keystorepresent" value="true"/>	
    	<condition property="signjar.message" value="Using keystore ${signjar.keystore}."
    		else="Specify -Dsignjar.keystore=/path/keystore.jks if you want to sign the release." >
            <isset property="signjar.keystorepresent" />
    	</condition>
    	<echo message="${signjar.message}" />
        <antcall target="signjar.internal" />
    </target>

    <target name="signjar.internal" if="signjar.keystorepresent">
        <echo message="Signing ${signjar.file}" />
        <input message="Enter alias for keystore ${signjar.keystore}:"
        	addproperty="signjar.keystorealias" defaultvalue="releasesigner" /> 
        <input message="Enter password for keystore ${signjar.keystore}:"
        	addproperty="signjar.keystorepass" defaultvalue="foo123" /> 
        <signjar keystore="${signjar.keystore}" jar="${signjar.file}"
        	alias="${signjar.keystorealias}" storepass="${signjar.keystorepass}" />
    </target>

	<!--
        Target that finds duplicated code. 
        You must install jar files from pmd.sourceforge.net in ANT_HOME/lib so the taskdef finds the class
	-->
	<!--
	<target name="cpd">
	    <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" />
	    <cpd minimumTokenCount="100" outputFile="${src}/cpd.txt">
	        <fileset dir="${src.java}/org.ejbca">
	            <include name="**/*.java"/>
	        </fileset>
	    </cpd>
	</target>
	-->

	<!-- Target that runs the Lint code check from http://www.jutils.com/.
         You must install lint4j.jar in ANT_HOME/lib so the taskdef finds the class
	-->
	<!--
	<target name="lint" description="Perform checks on EJBCA source code">
		<taskdef name="lint4j" classname="com.jutils.lint4j.ant.Lint4jAntTask" />
	  <lint4j packages="org.ejbca.*" level="3">
	    <sourcepath>
		  <dirset dir="${src}">
			<include name="**/java" />
		  </dirset>
		</sourcepath>
		<classpath>
		  <fileset dir="${lib}">
			<include name="**/*.jar" />
		  </fileset>
		  <dirset dir="${tmp}">
			<include name="bin/classes" />
		  </dirset>
          <path refid="j2ee.classpath" />
		</classpath>
	    <formatters>
	      <formatter type="text" />
	      <formatter type="text" toFile="ejbca-lint.out"/>
	    </formatters>
	  </lint4j>
	</target>
    -->

    <target name="ejbca-entity">
    	<ant antfile="modules/build.xml" target="ejbca-entity" />
    </target>

    <target name="ocsp-entity">
    	<ant antfile="modules/build.xml" target="ocsp-entity" />
    </target>

	<target name="ejbca-ejb-interface">
       	<ant antfile="modules/build.xml" target="ejbca-ejb-interface" />
    </target>

	<target name="ocsp-ejb-interface">
       	<ant antfile="modules/build.xml" target="ocsp-ejb-interface" />
    </target>

    <target name="ejbca-ejb-cli" description="Builds EJBCA command line interface">
    	<ant antfile="build.xml" dir="modules" target="ejbca-ejb-cli" />
    </target>
	
    <target name="adminweb.war">
    	<ant antfile="modules/build.xml" target="admin-gui" />
    </target>

    <target name="publicweb.war">
    	<ant antfile="modules/build.xml" target="publicweb-gui" />
    </target>

    <target name="cmp.war">
    	<ant antfile="modules/build.xml" target="cmp-war" />
    </target>

    <target name="healthcheck.war">
    	<ant antfile="modules/build.xml" target="healthcheck-ejbca-war" />
    </target>
		
    <target name="ocsphealthcheck.war">
    	<ant antfile="modules/build.xml" target="healthcheck-ocsp-war" />
    </target>	

    <target name="renew.war" if="renew.war.enabled">
    	<ant antfile="modules/build.xml" target="renew-war" />
    </target>   

    <target name="scep.war">
    	<ant antfile="modules/build.xml" target="scep-war" />
    </target>

    <target name="status.war">
    	<ant antfile="modules/build.xml" target="ocsp-ejbca-war" />
    </target>
	
    <target name="ocsp-war">
    	<ant antfile="modules/build.xml" target="ocsp-ocsp-war" />
    </target>

    <target name="webdist.war">
    	<ant antfile="modules/build.xml" target="webdist-war" />
    </target>

	<target name="clientToolBox" description="Builds command line clients as separate toolbox that can be deployed separately">
    	<ant antfile="modules/build.xml" target="clientToolBox" />
    </target>

    <target name="cmpTcpProxy" description="Builds a CMP TCP proxy.">
    	<ant antfile="modules/build.xml" target="cmpTcpProxy" />
    </target>
	
    <target name="cmpHttpProxy" description="Builds a CMP HTTP proxy.">
    	<ant antfile="modules/build.xml" target="cmpHttpProxy" />
    </target>
	
	<target name="showtime" >
		<tstamp>
			<format property="completiontime" pattern="yyyy-MM-dd HH:mm:ss Z"/>
		</tstamp>
		<echo message="Task completed ${completiontime}."/>
	</target>
	
    <target name="ejbcaws.client" description="Build the EJBCA WS-API client">
    	<ant antfile="build.xml" dir="modules" target="ejbca-ws-cli" />
    </target>

    <target name="ejbcaws.war" description="Build the EJBCA WS WAR">
    	<ant antfile="build.xml" dir="modules" target="ejbca-ws"/>
    </target>

    <target name="ejbca-ws-generate">
    	<ant antfile="build.xml" dir="modules" target="ejbca-ws-generate"/>
    </target>

    <target name="xkms.client" description="Build the EJBCA XKMS client">
    	<ant antfile="build.xml" dir="modules" target="ejbca-xkms-cli" />
    </target>

    <target name="xkms.war" description="Build the EJBCA XKMS WAR">
    	<ant antfile="build.xml" dir="modules" target="ejbca-xkms"/>
    </target>
	
	<target name="externalra-service">
    	<ant antfile="build.xml" dir="modules" target="externalra-service"/>
	</target>

	<target name="externalra-client">
    	<ant antfile="build.xml" dir="modules" target="externalra-client"/>
	</target>

	<target name="externalra-scep" description="Build the EJBCA External RA StandAlone SCEP application">
    	<ant antfile="build.xml" dir="modules" target="externalra-scep"/>
	</target>

	<target name="externalra-scep-deploy" description="Deploy the EJBCA External RA StandAlone SCEP application" depends="externalra-scep">
        <antcall target="j2ee:deploy-scep-war" />
	</target>

	<target name="externalra-gui" description="Build the EJBCA External RA StandAlone GUI application">
    	<ant antfile="build.xml" dir="modules" target="externalra-gui"/>
	</target>

	<target name="externalra-gui-deploy" description="Deploy the EJBCA External RA StandAlone GUI application" depends="externalra-gui">
        <antcall target="j2ee:deploy-externalragui-war" />
	</target>

	<target name="batchenrollment-gui" description="Build the EJBCA Batch Enrollment StandAlone GUI application" depends="ejbcaws.client">
    	<ant antfile="build.xml" dir="modules" target="batchenrollment-gui"/>
	</target>
</project>
