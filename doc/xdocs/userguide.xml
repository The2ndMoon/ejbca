<?xml version="1.0"?>
<document>
  <properties>
    <title>User Guide</title>
  </properties>
<body>

<section name="Introduction">
<p>
This User Guide contains detailed guides how to perform administrative tasks in EJBCA.
This guide is constant work in progress and if you would like to see a new section added, please contact us.
</p>
</section>

<section name="EJBCA Administration">
<subsection name="Administrative tutorials">
<p>
There are additional documentation and administrative tutorial movies at <a href="http://wiki.ejbca.org/">http://wiki.ejbca.org/</a>.
</p>
</subsection>
<subsection name="Administrating EJBCA">
<p>
You can administer EJBCA using a web browser and the admin-GUI, this is the easiest way. 
The admin-GUI requires SSL with authentication using client certificate, i.e. strong authentication.
</p><p>
You can also use the command line interface (cli) which is called by 'bin/ejbca.sh'. 
If you call ejbca.sh you get a list of available commands, and you can get help for all commands by calling
them without arguments, i.e:
</p>
<source>
bin/ejbca.sh ca
bin/ejbca.sh ra adduser
etc etc
</source>
<p>
Finally you can also use the <a href="#EJBCA client toolbox">EJBCA client toolbox</a> to perform administrative tasks using web services.
</p>
</subsection>
</section>

<section name="Managing CAs">
<subsection name="Creating more CAs">
<p>
After installation, that creates a default admin CA
you can create more CAs using the admin GUI.
</p><p>
Your CAs can be either root CAs, subordinate CAs to another CA in EJBCA 
or subordinate CAs to an external CA. The initial admin CA is a RootCA.
</p><p>
You can also use the command line interface (cli) 
'bin/ejbca.sh ca init' to create new CAs, although a better idea is to do it from the Admin GUI.
Ex: 'bin/ejbca.sh ca init TestRoot "C=SE,O=PrimeKey,CN=EJBCA" 2048 365 2.5.29.32.0' 
will create a root CA with the DN 'C=SE,O=PrimeKey,CN=EJBCA'. The
keylength is
 2048 bit (RSA) and the validity of the root certificate is 365
 days. Quote the DN  so it is treated as one argument.
</p><p>
PKIX requires that a CRL always is available even if it is
empty. When creating a new CA the CA certificate is stored
and published (if any Publishers are configured), and the initial CRL is created 
and stored/published.
</p><p>
Subordinate CAs are created using the admin GUI, you can not use the 
cli for that.
</p>
</subsection> 
<subsection name="Creating a SubCA signed by an external CA">
<p>
Some CA hierarchies have the requirement of being signed by an external Certificate Authorities and sometimes other external CA:s need to be signed by your CA.
</p>
<p>
When creating a CA that is signed by an external CA, you actually create a PKCS10 certificate request
that is sent to the external CA. When the external CA returns your CAs certificate, this is processed and
the CA becomes activated.
</p>
<p>
In order to have your CA signed by an external CA you have to go through the following steps.
<ol>
<li>Go the the 'Edit Certificate Authorities' page in the Administration GUI.</li>
<li>Create a new CA in the same way as internal CA:s. But when selecting signing CA, select 'External CA' instead. Now will the 'Certificate Profile', 'Validity', 'Subject Alternative Name' and 'Policy Id' 
fields become gray and not editable. Fill in the Description and CRL Specific data and click on the 'Make Certificate Request' 
button in the bottom of the page.</li>
<li>At the next page called 'Make Certificate Request' you can upload the external CA certificate chain that you want to sign your CA certificate with, or you can wait until later by checking 'No CA chain file available'.  
This file should be in PEM encoding. If there is more than one top CA certificate then should all their certificates be appended into one single file. 
It should be in plain PEM format without blank lines before or after. An example is below.</li>
<li>Next, after clicking 'Make Certificate Request' and if everything went successful, should the generated PKCS10 certificate request be displayed that you can copy and paste to the signing CA. There is also the option to download the PEM file if that approach is preferred.</li>
<li>Now should the signing external CA sign the certificate request and return a certificate. Meanwhile will the newly created CA have a status of 'Waiting for Certificate Response' and will not appear anywhere in the system except in the 'Edit CA' page until it's activated.</li>
<li>When the Certificate Response has arrived, it is time to activate the new CA. You mark the waiting CA and click on 'Edit' button in the 'Edit CA' page. Go to the bottom of the page and click on 'Receive Certificate Response'. Then upload the received certificate and click again on 'Receive Certificate Response'.</li>
<li>Now if the received certificate creates a valid certificate chain with the previously uploaded top CA certificates will the status of the CA be set to 'Active'.</li>
<li>If you did no upload a certificate chain when the request was created, you can do so now by uploading the complete PEM formatted chain now. The CAs own certificate should be first in the file, followed by the issuing CAs certificate(s). 
When uploading a chain, the certificates must be converted to PEM format if it isn't already so. This can be accomplished with OpenSSL among other tools with the following command if you have received a file in DER encoding (.cer ending):<br/>
&gt;openssl x509 -inform DER -in filename.cer -outform PEM -out filename.pem</li> 
<li>Observe if you want to activate OCSP functionality for this new CA you have to edit it once again and mark the OCSP functionality as active.</li>
<li>The new externally signed CA is ready to use.</li>
</ol>
</p>
<p>Example of a plain PEM file for uploading as a certificate chain:
</p>
<source>
-----BEGIN CERTIFICATE-----
MIIDSjCCAjKgAwIBAgIIEvabM2CgLZcwDQYJKoZIhvcNAQEFBQAwMzETMBEGA1UE
AxMKV2FsdGVyIENBMTEPMA0GA1UEChMGV2FsdGVyMQswCQYDVQQGEwJTRTAeFw0w
MzA5MjkwOTI2MzRaFw0wNDA5MjgwOTM2MzRaMDMxEzARBgNVBAMTCldhbHRlciBD
QTExDzANBgNVBAoTBldhbHRlcjELMAkGA1UEBhMCU0UwggEgMA0GCSqGSIb3DQEB
AQUAA4IBDQAwggEIAoIBAQC3hXksEud68WwPWWHLJQQkTCuX/K32KHPPn/uPUzab
Cpc/FnaTmF9yEHmpFdAUr0v5ZPnxVQpcuwrDZc4YfaTLfyUHicQbkftsPAj/2hE4
UukS2j+nQQcJEnIY0vSZOAOLU3j4bf/RlS6Jl7TPFFfWTxuQF8AruQ+YhaE52JFi
SapGGXKQJxhsvKT91rLaWSFWNMTTLSDPaBXYEYFuFhLNclDJWf4whfxHSHHkARB/
3Z0XlT4sFj0fmqEQ6yQb6/WqMFK+1XAIBXZO2MXe26IigWkXw1GfkIx1+fbUPrzu
8EI2jb0TWl21j1+Mvh3APZtVj5FJNuZN9bgdbrq88hLXAgERo2QwYjAPBgNVHRMB
Af8EBTADAQH/MA8GA1UdDwEB/wQFAwMHBgAwHQYDVR0OBBYEFNhHOtAwo8MOE/nI
zzg9KFxCYs8YMB8GA1UdIwQYMBaAFNhHOtAwo8MOE/nIzzg9KFxCYs8YMA0GCSqG
Sib3DQEBBQUAA4IBAQBHpvicbuJTACtpdwe6cF1nQ57FHnnYr+aAe+ZpH43R6R9d
eMps02nFAMSs5o8sbPokrpwAtk2yYwCohEFDkZ5JPzIBkgNlNnVHNNRHQTRJ6v6Q
F2MWUEPc1u5kxSjXEVMmZerG9oknMwpYFmkOnKF46vP3Njt/ExOeRAvCEQq2b8pz
2QGg8/IK6Omfi7IwxtVYUpgvhdcWekbFIlxkXZiEdlHNBIV1GzzPK1VEzg5kugD/
h6jeykrsKASx+55AkkBPt2kI+ZikVtp3SVhfZQMGY86c5QMQGlPWYNsr4ociyhfX
I52Qby+/HNG1ijpx66Z30lUMmXTtWtL4Cu8s7UvC
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIICxzCCAa+gAwIBAgIIBfqGjbQu14swDQYJKoZIhvcNAQEFBQAwMzETMBEGA1UE
AxMKV2FsdGVyIENBMTEPMA0GA1UEChMGV2FsdGVyMQswCQYDVQQGEwJTRTAeFw0w
MzA5MjkwOTMzMDFaFw0wNDAxMDcwOTQzMDFaMDQxETAPBgNVBAMTCER1ZGUgQ0Ex
MRIwEAYDVQQKEwlEdWRlIEluYy4xCzAJBgNVBAYTAlNFMIGdMA0GCSqGSIb3DQEB
AQUAA4GLADCBhwKBgQCM1hR/DYPXfKDa3oVJbppV4OcYtn2XP9W5Kc1d0+U4qLOm
JsqIFHDWR07o1QFiPhc9z0UGtwYeE3CpQ8fG8zeur5e286PYptZIST77B9vOdQdl
PA+dFKFIaEwdzcS7H3Lf38WTE4D1OnyRX5jsiUe+YIQRtjv/Bmem+kSR84G9TwIB
EaNkMGIwDwYDVR0TAQH/BAUwAwEB/zAPBgNVHQ8BAf8EBQMDBwYAMB0GA1UdDgQW
BBTDrXZGYXS9GyIUBOZrglhwNjjcnTAfBgNVHSMEGDAWgBTYRzrQMKPDDhP5yM84
PshcQmLPGDANBgkqhkiG9w0BAQUFAAOCAQEAdmTP1qVUcAKOf+/zvb2lcLKvFwKT
6KqDlO5NofjqCIfNgCjO2mO176cslnFIbEZQqgGIUnJ3AwfHKHj+U3kM3n5T29kF
xiLKxIDfjsY6qC03KHeGAgxI92XZyPsO1is6Y6qUnAmiwhIp5HS6E0+xIP1shmtJ
ZvqU8bueKUWSjx3JDzq+UNLX5pFkK0P0R90TCUEkBx1FNWqoWwb8zfAuO5zcNTEj
5E9esLjwxJQnIVPiA2l3FfZN9yomK+q7kTZJkX2kMx7G850lPR8CneXZT6bIOfck
Dw3PqQiroMNx2+gzC/f/wTXsF92aujyG+IZx1FIcNg/MoHXBWG7T8YrjnQ==
-----END CERTIFICATE-----
</source>
<p>
You can treat an internal CA, i.e. a CA residing on the same EJBCA instance as another CA, as an external CA. 
From the SubCA this works just like the normal case, but on the RootCA you must choose the exact same CA Name as
the already existing internal CA when you choose to "Process Certificate Request".  
<br/>
This can be useful if you have an HSM setup where only one set of keys can be active at one time, for example using nCipher with
two different, non-persistence, operator cards sets for the RootCA and the SubCA. Using the SubCA as an external CA you can still create
the PKI but with only one CA active at a time.
</p>
</subsection> 
<subsection name="Signing an External CA">
<p>
In some cases you might want to have one of your CA:s signing another external CA. This is done in the following way:
<ol>
<li>In the 'Edit CA' page, choose a CA name of the external CA you are about to sign and click on 'Process Certificate Request'.</li>
<li>Then you are requested to upload the certificate request sent from the external CA. This should be a file in PEM-encoding.</li>
<li>The next step is to fill in the data about the CA certificate you are about to create. This is very similar to when you are creating an internal CA but with a fewer fields. The Subject DN is taken from the request. But the signing CA, certificate profile, validity, subject alt name and policy id have to filled in manually.</li>
<li>After clicking 'Process Certificate Request' the certificate is created and displayed in PEM format. You can also download it as a regular PEM file or as a PKCS7 PEM file.</li>
<li>Send the processed certificate back to the external CA for activation.</li>
<li>In the 'Edit CA' page will the newly processed CA be displayed with the status 'External'. This processed CA will only be shown in the 'Edit CA' pages and nowhere else since the system cannot use it. If you want to view the processed certificate, go to the edit page and click on the 'View CA Certificate' link in the bottom of the page.</li>
</ol>
</p>
</subsection>
<subsection name="Requesting a cross or bridge certificate">
<p>
If you have set up your own CA you can request another CA to cross certify your CA, or you can get certified by Bridge CA such as the Federal Bridge. This is done in the following way:
<ol>
<li>In the 'Edit CA' page, choose a CA name of the external CA you are about to sign and click on 'Edit'.</li>
<li>In the lower part of the screen, click on 'Make Certificate Request'.</li>
<li>Now check 'No CA chain file available' and click 'Make Certificate Request'.</li>
<li>Save the created PKCS#10 certificate request to disc and send to the other CA.</li>
</ol>
</p>
<p>Now you have a certificate request to send to the other CA or bridge CA. When the other CA have issued a certificate for you, everything is completed.
You don't need to (and you can't) import the cross-certificate or bridge-certificate in EJBCA. What you need to do is make sure the clients using the certificates issued by your CA
have access to the correct certificate chain. If you are cross-certified with several other CA, multiple possible certificate chains exist.
<br/>Handling the certificate chains on clients is out of the scope for EJBCA.
</p> 
</subsection>
<subsection name="Converting an OpenSSL CA">
<p>
You can convert a PEM-style Root CA key to a PKCS12 file that can be imported in EJBCA.
</p>
<source>
openssl pkcs12 -export -out server1.p12 -inkey cakey.pem -in ca.pem -name privateKey
</source>
<p>
You can import the CA with the Admin GUI or the cli. See the section 'Export and import CAs'.
<br/>
After importing CAs you can also import users and certificates. See the section 'Import users'. 
</p></subsection>

</section>

<section name="Managing End Entities">

<subsection name="Creating Users">
<p>
Users are added in the admin-GUI, 'Add End Entity' or with the cli
'bin/ejbca.sh ra adduser'.
The users DN is normally entered in the cli as "C=SE,O=MyOrg,OU=MyOrgUnit,CN=MyName".
If a ',' is needed in the DN the comma must be escaped using '\,'.
</p></subsection>

<subsection name="Create User certificates">
<p>
To enroll for a certificate using a browser, go to http://your_server_name:servlet_container_port/ejbca/
(e.g. http://127.0.0.1:8080/ejbca/) and select &quot;Create Browser Certificate&quot;.
Enter username and password, click the &quot;OK&quot;-button and follow the instructions.
</p><p>
To enroll for certificates manually (e.g. for server certificates), go to
http://your_server_name:servlet_container_port/ejbca/, select
&quot;Create Server Certificate&quot; and fill out the form.
</p><p>
Note that application for certificates only work when the status of a user is
NEW, FAILED or INPROCESS (one time password thing). The
status is set to
GENERATED after a certificate has been issued. To issue a new
certificate, the
status must be reset to NEW, which can be done through
the admin-GUI or the cli.
</p><p>
During batch generation of certificates, users with status NEW
or FAILED are
generated. This is due to the possibility that a batch generation for some
reason failed. If it fails status is set to FAILED and you can try again after fixing the
error.
</p></subsection>

<subsection name="Create server certificates">
<p>
The best way to create server certificates is to generate a
PKCS12, JKS or PEM file for the server, depending on what server it is.
To do this:
<ol>
<li>
Create desired profiles (the default entity and certificate profiles work fine, but are perhaps too generic).
You certificate profile should have:<br/> 
- KeyUsage: <i>Digital signature, Key encipherment</i><br/>
- Extended key usage: <i>Server Authentication</i><br/>
</li>
<li>Create a user with the admin-GUI or 'bin/ejbca.sh ra'. 
<br/>The Distinguished name (DN) of the server should have the
the servers full hostname (host.domain.com) in the CommonName (CN) field.
<br/>Example DN for webserver: "C=SE,O=AnaTom,CN=
www.anatom.se", or
for mailserver "C=SE,O=AnaTom,OU=Engineering,CN=mail.anatom.se". 
<br/>You can also put the same name (or several names) as a DNSName in SubjectAlternativeNames. 
<br/>For so-called wildcard certificates, use *.anatom.se.
<br/>Set the token type to match the kind of token that should be generated for your server.
</li>
<li>To be able to batch-generate certificates, the batch
generation program must have access to the users (servers) password in order to request
a certificate on behalf of the user. Normally the password is stored in hashed
form, so the password must be stored in clear text form by running
'bin/ejbca.sh ra setclearpwd <i>username password</i>'
</li>
<li>Generate private keys and certificates by running 'bin/ejbca.sh batch'
</li>
</ol>
</p><p>
Many servers (ex Apache, Tomcat) wants keys and certificates
in PEM-format (Apache) or SUN JKS (Tomcat).
To generate PEM-files use token type PEM. The PEM-files will be stored in a
separate subdirectory, 'pem'. The generated PEM-files can be used with
Apache etc, and are NOT protected by any password.
To generate JKS-files use token type JKS. The JKS-files will be stored in the
subdirectory, 'p12' instead of PKCS12-files. The generated JKS-
files can be used with Tomcat etc, and are protected (both private key password
and keystore password) by the users password.
</p>
<p>
If the server generates the keys and a certificate request (CSR) for you, select token type "User generated".
You can use the public enrollment web pages (http://127.0.0.1:8080/ejbca/) to paste the request and receive the certificate.
This function is under "Certificate Enrollment->manually for a server".
</p>
<p>
It is also possible to use openssl to transform a PKCS12 file to PEM-
format.
</p>
<source>
openssl pkcs12 -in pkcs12-file -nodes
</source>
<p>
copy and paste the private key to key file, the first certificate to
server cert file and last certificate to CA cert file (If your CA is a
subordinate CA to another Root CA, the CA cert file may need to contain the whole cert
chain). Exactly how your server wants the files is server dependent.
</p>
<p>
For your convenience, here is the standard text (RFC2818) how browsers validate the name(s) in the certificate.
</p>
<source>
If a subjectAltName extension of type dNSName is present, that MUST
be used as the identity. Otherwise, the (most specific) Common Name
field in the Subject field of the certificate MUST be used. Although
the use of the Common Name is existing practice, it is deprecated and
Certification Authorities are encouraged to use the dNSName instead.

Matching is performed using the matching rules specified by
[RFC2459].  If more than one identity of a given type is present in
the certificate (e.g., more than one dNSName name, a match in any one
of the set is considered acceptable.) Names may contain the wildcard
character * which is considered to match any single domain name
component or component fragment. E.g., *.a.com matches foo.a.com but
not bar.foo.a.com. f*.com matches foo.com but not bar.com.

In some cases, the URI is specified as an IP address rather than a
hostname. In this case, the iPAddress subjectAltName must be present
in the certificate and must exactly match the IP in the URI.
</source>
</subsection>
<subsection name="Request Browser Certificate Renewal">
<p>
	If renewal is enabled there is an extra link under "Enroll" on 
	the public web page called "Request Browser Certificate Renewal". The
	page requires authentication with a client certificate and makes it 
	possible for the user to request the certificate to be renewed. 
</p>
<p>
	The renewal functionality is provided in a separate web module called 
	renew.war which is not deployed and linked to by default. It can be 
	enabled in conf/web.properties by setting web.renewalenabled=true and 
	then (re-)deploy EJBCA. 
</p>
</subsection>
</section>

<section name="Managing Administrators">

<subsection name="Administrators">
<p>
An EJBCA Administrator is identified by information in the client SSL
certificate. The information is validated in the following steps:
<ol>
<li>During the SSL handshake with the application server, the issuer of the
client certificate is verified with a list of trusted CA certificates known as
the 'truststore'.</li>
<li>EJBCA verfies that the client certificate exists in the database and that
it's not revoked. (Configurable in web.properties.)</li>
<li>EJBCA tries to match the information in the certificate with any of the
matching criterias found in the different administrator groups. Matching rules
are evaluated separately so matching with both CN and OU would match all CN
matched certificates and also all OU matched certificates.</li>
<li>If a match is found, the access rules for this group is given to the
administrator.</li>
</ol>
</p><p>
Administrator privileges is configured through "Edit Administrator
Privileges" in the Admin GUI or by using the CLI. If you have locked yourself
out of the GUI, the CLI can add another admin certificate to allow continued
operations.
</p>
</subsection>
<subsection name="Administrators issued by external CAs">
<p>Administrator certificates in EJBCA does not have to be issued by a CA in the same installation, but can be issued by any other CA.
By leveraging this feature you can for example use a national ID for administration of an organizational PKI
</p>
<p>
To use a certificate issued by an external CA as Administrator:
<ol>
<li>Add the CA-certificate to p12/truststore.jks with "keytool -import
-trustcacerts -file externalca.pem -keystore p12/truststore.jks -storepass
changeit -alias externalca"</li>
<li>Redeploy EJBCA (ant deploy) and restart the application server to make sure the new
truststore is in use</li>
<li>Import the CA-certificate under "Admin GUI - Edit Certificate Authorities
 - Import CA Certificate.." or use the CLI</li>
<li>Add the Administrator to the desired Administrator group under "Admin GUI
 - Edit Administrator Privileges"</li>
<li>To allow administrators to log in when their certificates are not present in the EJBCA database you have to set 
web.reqcertindb=false in conf/web.properties.</li>
</ol>
</p>
</subsection>
<subsection name="Renewing Superadmin">
<p>
Renewing the superadmin certificate is done in the same way as for any client certificate. You can use both the GUI or the CLI to renew the superadmin.
The superadmin certificate is normally issued as a PKCS#12 keystore (if not issued as a browser certificate for smart card enrollment). 
</p>
<p>Using the admin GUI:</p>
<ul>
<li>Go to Search/Edit End Entities.</li>
<li>Search for user 'superadmin'.</li>
<li>Click Edit End Entity.</li>
<li>Set a new password and set status to NEW, click Save.</li>
<li>Go to Public Web and then Create Keystore.</li>
<li>Enter superadmin username, and the password you gave.</li>
<li>In the next screen, select key length 2048 and click OK.</li>
<li>Your new superadmin keystore is downloaded. You can install it in your browser.</li>
</ul>
<p>Using the CLI:</p>
<source>
bin/ejbca.sh ra setuserstatus superadmin 10
bin/ejbca.sh ra setclearpwd superadmin password
bin/ejbca.sh batch
</source>
<p>Your new superadmin keystore is generated and stored in sudirectory p12. The password is password, as given to the setclearpwd command.
</p> 
</subsection>
</section>

<section name="Managing Administrator roles">
<p>This section is a tutorial that will guide you through creating a new administrative user and new administrative group with limited privileges.</p>
<subsection name="Administrator roles">
<p>
The current predefined administrator roles that exists in EJBCA are:
<ul>
<li>The CA administrator:</li>
<ul>
<li>manages certificate profiles</li>
<li>manages end entity profiles</li>
<li>manages log configuration</li>
<li>can create RA administrators</li>
</ul>
<li>The RA administrator:</li>
<ul>
<li>can create end entities</li>
<li>can modify end entities</li>
<li>can revoke end entities</li>
<li>can delete end entities</li>
<li>can view existing end entities and their history</li>
</ul>
<li>The supervisor:</li>
<ul>
<li>can view created end entities</li>
<li>can search the log and see who have done what</li>
</ul>
<li>The super administrator:</li>
<ul>
<li>has overall access to EJBCA</li>
<li>can edit system configuration</li>
<li>can manage CAs</li>
<li>can manage publishers (LDAP, AD, custom)</li>
<li>can create CA administrators</li>
</ul>
</ul>
</p>
</subsection>
<subsection name="Creating a Certificate Profile For the Administrator">
<p>This section will show you how to create a new Certificate Profile for administrators. 
The administrators certificates will be issued by a CA called AdminCAv1
</p>
<p>
<ul>
<li>Under "CA Functions" -> "Edit Certificate Profiles"</li>
<li>Enter a name for your end entity certificate profile e.g. "AdministratorEndEntityCertificateProfile"</li>
<li>Select "AuthEndEntityCertificateProfile"</li>
<li>Press "Use Selected as Template"</li>
<li>Select "AdministratorEndEntityCertificateProfile"</li>
<li>Press "Edit Certificate Profile"</li>
<li>Under "Available CAs"</li>
<li>Choose "AdminCAv1"</li>
<li>Press "Save"</li>
</ul> 
</p>
</subsection>
<subsection name="Creating an End Entity Profile for the Administrator">
<p>This section will show you how to create a new End Entity Profile for administrators.
The profile will be connected to the Certificate Profile created above.</p>
<p>
<ul>
<li>Under "RA Functions" -> "Edit End Entity Profiles"</li>
<li>Enter a name for your end entity profile, "AdministratorEndEntityProfile"</li>
<li>Select "AuthEndEntityProfile"</li>
<li>Press "Use Selected as Template"</li>
<li>Select "AdministratorEndEntityProfile"</li>
<li>Press "Edit End Entity Profile"</li>
<li>Under "Default Certificate Profile"</li>
<li>Choose "AdministratorEndEntityCertificateProfile"</li>
<li>Under "Available Certificate Profiles"</li>
<li>Choose "AdministratorEndEntityCertificateProfile"</li>
<li>Under "Default CA"</li>
<li>Choose "AdminCAv1"</li>
<li>Under "Available CAs"</li>
<li>Choose "AdminCAv1"</li>
<li>Press "Save"</li>
</ul>
Issue the following new end entity based on the new end entity profile.
<br/>CN: SoftCard RA Admin1
</p>
</subsection>
<subsection name="Creating a new RA Administrator group">
<p>
The RAadmin shall have access to add/list/edit end entites. To create a new administrator group: 
<ul>
<li>Choose "Edit Administrator Privileges" in the left frame.</li>
<li>Press "Add".</li>
<li>Choose a name for your new administrator group, "RAAdministratorGroup".</li>
<li>When the group is created, press "Access Rules".</li>
<li>Choose the administrator groups role, "RA Administrator".</li>
<li>Under "Authorized CAs", choose which CAs the administrator group should have access to. Choose "AdminCAv1".</li>
<li>Under "Edit End Entity Profiles" Select "AdministratorEndEntityProfile".</li>
<li>Press "Save".</li>
</ul> 
</p>
</subsection>
<subsection name="Adding new Administrators to the RA Administrator group">
<p>
<ul>
<li>Choose "Search/Edit End Entities" and select your newly created end entity, choose "View Certificates".</li>
<li>Copy the value of "Certificate Serial Number", e.g. "5F003A0113F507F9".</li>
<li>Go to "Edit Administrator Privileges", press "Administrators" under "RAAdministratorGroup".</li>
<li>Choose the CA that the administrator belongs to, "AdminCAv1".</li>
<li>Paste the text from "Certificate Serial Number" in the "Match value".</li>
<li>Press "Add"</li> 
</ul>
</p>
</subsection>
<subsection name="Test the new administrator">
<p>
Try to log in with the new administrators to see the difference between that and the superadmin.
</p>
<p>
You should also try the different roles and privileges to see the differences between them all.
</p>
</subsection>
</section>

<section name="Misc information">
<subsection name="EJBCA client toolbox">
<p>
There are also a set of different tools that could be used without an EJBCA.
</p><p>
Build these tools with:
</p><source>
ant clientToolBox
</source><p>
The directory './clientToolBox-dist' is then created. You may then move this directory to any location.
</p><p>
To use any of the tools just call 'ejbcaClientToolBox.sh' in this directory. You may call the script from any location.
</p><p>
If you put the directory in your PATH then you just have to write 'ejbcaClientToolBox.sh' to call it.
</p><p>
If you call the script without any arguments you get a list of all valid first arguments which specifies the tool to use. Example:
</p><source>
ejbcaClientToolBox.sh
</source><p>
Then just one argument gives help about the specified tool. Example:
</p><source>
ejbcaClientToolBox.sh ocsp
</source>
</subsection>
<subsection name="Backup and restore of EJBCA">
<p>
To backup an EJBCA installation you need to:
<ul>
<li>Backup the database</li>
<li>Backup all $EJBCA_HOME/conf/**</li>
<li>Backup all $EJBCA_HOME/p12/**</li>
</ul>

To restore:
<ul>
<li>Restore database</li>
<lI>Unzip new EJBCA</lI>
<li>Restore conf and p12</li>
<li>Run "ant deploy" to configure JBoss and deploy EJBCA. If you are using another application server, consult the Installation doc for deployment.</li>
</ul>
</p>
<p>
If you are using soft keystores for the CAs this is all that is needed. If you are using an HSM you need to backup your keys in the 
HSM as well. How this backup and restore is done depends on the HSM you are using. Consult the documentation for your HSM.
</p>
</subsection>
<subsection name="SSL certificate expire">
<p>
The SSL certificate used for SSL in JBoss (SSL is used for the admin-GUI) is stored in APPSRV_HOME/server/default/conf/keystore.jks.
The default validity time for the SSL certificate is two years. When this expire, you must generate a new one. 
</p><p>
You can do this through the admin-GUI by:
<ol>
<li>Go to 'List/Edit End Entities' and search for user 'tomcat'.</li>
<li>'Edit_End_Entity' and set the 'Password' to the same as httpsserver.password in your conf/ejbca.properties and 'Status' to 'New'.</li>
<li>Open up a command line in EJBCA_HOME and run 'bin/ejbca.sh batch'.</li>
<li>Copy EJBCA_HOME/p12/tomcat.jks to APPSRV_HOME/server/default/conf/keystore.jks, or run 'ant deploy'. Ant deploy will do some other things as well, so if you are not sure, just copy the file.</li>
<li>Restart JBoss.</li>
</ol>
</p>
<p>
You can also do everything using the CLI:
<ol>
<li>bin/ejbca.sh ra setuserstatus tomcat 10</li>
<li>bin/ejbca.sh ra setclearpwd tomcat &lt;password from httpsserver.password&gt;</li>
<li>bin/ejbca.sh batch</li>
<li>cp p12/tomcat.jks $APPSRV_HOME/server/default/conf/keystore.jks</li>
<li>Restart JBoss.</li>
</ol>
</p>
</subsection>
</section>

</body>
</document>
