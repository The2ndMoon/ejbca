<?xml version="1.0"?>
<document>
  <properties>
    <title>Installation</title>
  </properties>
<body>

<section name="About">
<p>
EJBCA is a fully functional Certificate Authority built in Java.
Based on JEE5 technology it constitutes a robust, high
performance and component based CA. Both flexible and platform independent,
EJBCA can be used standalone or integrated in any JEE5 application.
</p><p>
The EJBCA Homepage can be found at http://ejbca.org/.
Information about contacting the EJBCA team, contributing to
EJBCA, etc can be found through the Homepage.
</p><p>
More documentation can also be found on the homepage and on the wiki site http://wiki.ejbca.org/.
</p><p>
EJBCA is completely written in Java and should as such run on any
platform where a JEE server runs. Development and testing is
performed on Linux and Windows platforms.
</p></section>

<section name="Security">
<p>
Security is discussed below in the chapter about configuration in the User Guide
and in <a href="security.html">Security</a>.
</p><p>
Please take a minute to thoroughly consider the security
implications and make sure you know what you are doing when you are setting
up a CA.
</p><p>
Whether running running on Linux or Windows, you should consider using multiple levels of firewalls.
The first level of firewall could be a host based firewall such as IPTables in Linux or a similar approach on windows.
See the Security document for information about ports that are used.
</p>
<p>
Don't forget to configure your application server for security! See
<a href="security.html">security</a>.
Security is CRITICAL for a CA.
</p>
</section>

<section name="Upgrade">
<p>
See doc/RELEASE_NOTES and UPGRADE for information about upgrading from an 
earlier version of EJBCA.
</p></section>

<section name="Quick start guide">
<p>If you want to get started really quick, and is using Ubuntu Linux, you can follow the <a href="#Ubuntu%20quick%20start">Ubuntu quick start</a> guide below.</p>
<subsection name="Prerequisites">
<note>
EJBCA makes use of strong crypto and keystore passwords longer than 7 characters.
For this to work you must install the 'Unlimited Strength Jurisdiction Policy Files' for JDK.
The policy files can be found at the same place as the JDK download at java.sun.com. The text
"Using exportable cryptography" is shown on the first page in the Admin GUI if you fail to
install this package. Further information on this can be found in the Sun documentation on
the JCE.
</note>
<note>
The default, and easiest, installation is done on JBoss. EJBCA can however also run on Glassfish, Weblogic and OC4J. 
If you want to deploy on these application servers, read the section for your application server below. You mileage may vary on
other appservers than JBoss, which is the most well supported.
</note>
<p>
Needed to build and run are:</p>
<ul>
<li>JDK 1.6.x (support for 1.5.x was dropped in EJBCA 4.0).</li>
<li><i>Unlimited Strength Jurisdiction Policy Files</i> for your JDK</li>
<li>JBOSS >=5.1.x (support for JBoss 4.2.x was dropped in EJBCA 4.0).</li>
<li>Ant >= 1.7.1 to build (http://jakarta.apache.org/ant/)</li>
</ul>
<note>
JBoss 5.x has a bug causing issues with the BC JCE provider when the Sun JVM is used. To work around this you can copy the files EJBCA_HOME/lib/bc*.jar to JBOSS_HOME/server/default/lib/.
Remember this when it's time for upgrades! Tracked by JBoss as JBAS-7882.
<br/>
JBoss 5.x also has a bug with multiple mail configurations. If you will be using mail notifications see conf/mail.properties.sample for configuration instructions. Tracked by JBoss as JBPAPP-3766.
</note>
<note>
JBoss 6.0.0 does not work with Oracle JDK, because JBoss still have not fixed <a href="https://issues.jboss.org/browse/JBAS-7882">JBAS-7882</a>.
<br/>OpenJDK works just fine though, such as the OpenJDK distributed with RedHat, Ubuntu, Debian etc.
</note>
<p>
Set the environment variable APPSRV_HOME to the directory where
the appservers root is
 (/jboss-version). This is done so the compile process will find JEE jar files, and the deploy script will
 know where files are to be copied on JBoss. On JBoss they are by default copied to the
 directory $APPSRV_HOME/server/default/deploy.
 </p>
 <p>
 Windows/Unix: 
 When we describe command line commands below we use
 unix notation, e.g. 'ejbca.sh' for the executable command files.
 The same command files are available for windows as cmd-files,
 e.g. 'ejbca.cmd.'
</p>
<p>
        Java 1.6.0<br/>
        Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files 6.0
        <br/><a href="http://java.sun.com/javase/downloads/index.jsp">http://java.sun.com/javase/downloads/index.jsp</a>
        </p>
<p>NOTE: If you are unsure what version of EJBCA you are running, type 'ant ejbcaversion' in the EJBCA_HOME directory. (EJBCA 3.5 and newer.)</p>
</subsection>

<subsection name="Configure">
<note>
If you are only testing EJBCA at this stage and is not setting up a production environment, you can skip this step.
There are default configuration options, that should work in a test environment, for everything.
</note>

<subsubsection name="Configuration files">
<p>The configuration of EJBCA that can not be configured in the admin GUI is located in properties files in the <i>conf</i> directory.
All properties are documented in sample files and to configure an option you copy the sample file, for example copy <i>conf/ejbca.properties.sample</i> to <i>conf/ejbca.properties</i>
and configure <i>conf/ejbca.properties</i>. You should at least familiarize your self with the options in <i>conf/install.properties</i> and <i>conf/ejbca.properties</i>.
Most options, except those in install.properties can be changed after installation.
</p> 
</subsubsection>

<subsubsection name="EJBCA configuration">
<p>
1) Copy conf/install.properties.sample to conf/install.properties and conf/ejbca.properties.sample to conf/ejbca.properties
Customize if needed. The default values works fine for a test installation. 
</p><p>
<ul>
<li>Customize the CA properties in conf/ejbca.properties if you need to do so.
For production use you need to do this, don't forget to edit
passwords to be secure and secret. Keep conf/ejbca.properties as secret as possible.
DO NOT forget the passwords, if you need to re-install the software sometime.</li>
<li>To use a hard ca token from start change ca.tokentype, ca.tokenpassword and ca.tokenproperties in install.properties. You also need to add the appropriate values to the ca.tokenproperties file for the HSM. Read the HSM documentation for the right values.</li>
<li>
To put the initial superadmin certificate on a smartcard, set superadmin.batch=false in
web.properties. Enroll from public web after the installation is complete, as you would
with any other smartcard user. Username is &quot;superadmin&quot; and password is superadmin.password
from web.properties.
</li>
<li>If you are deploying on JBoss EAP you probably want to look at the property 'jboss.config' as well, since 'production' may be the default server to start on JBoss EAP (depends on your configuration).</li>
</ul>
Do the same with other configuration files that you might want to customize. The default values often works fine and is a safe bet if you are unsure.
Most options are well documented in the sample files.
<ul>
<li>Customize the database in conf/database.properties if needed. 
But easiest thing is to keep the default as it is,
it will use the JBoss embedded HSQLDB and everything will be easier for you.
For production use you should use a real database instead of the embedded one.</li>
</ul>
</p>
</subsubsection>

<subsubsection name="JBoss settings">
<p>
On JBoss 5.1.x, edit (not needed on JBoss 6.0.x)
</p> 
<source>
 APPSRVR_HOME/server/default/deployers/jbossws.deployer/META-INF/jboss-beans.xml
</source>
<p> 
and comment out the line:
</p> 
<source>
&lt;property name="webServiceHost"&gt;${jboss.bind.address}&lt;/property&gt;
</source> 
<p>
to force the location to be generated with info from the WSDL request. 
</p>
</subsubsection>
<subsubsection name="Memory configuration">
<p>
The memory parameters for Java is by default configured very low, for JBoss it is set by default to allow
a maximum memory usage of 512mb, which is sufficient for most configurations. We still recommend that you check your 
configuration of java memory arguments to set them to
at least '-Xms128m -Xmx512m -XX:MaxPermSize=256m'. 
For JBoss this is done in APPSRV_HOME/bin/run.conf where the line:
</p>
<source>
JAVA_OPTS="-server -Xms128m -Xmx512m -XX:MaxPermSize=256m"
</source>
<p>
can be changed.
</p>
</subsubsection>

<subsubsection name="Considerations">
<p>
When everything is prepared, there are a few things to
configure before starting your applications and running everything in a production environment.
</p><p>
In a production environment you should use something like the following structure:
<ol>
<li>Go through the install process creating an AdminCA. Use a simple DN. 
This CA should only used to issue the administrator certificates. Not published in LDAP. 
If you want to use an HSM for this CA, see the documentation in the configuration file conf/ejbca.properties.sample.</li>
<li>Once installed, create all your REAL CAs using the admin-GUI. Now you can use the certificate 
profiles etc that you like. These certificates can be published in LDAP.
See doc/howto/HOWTO-multiplecas.txt for example of a detailed configuration guide.</li>
</ol>
</p><p>
In a production environment you should use something else than the default Hypersonic database that comes 
with JBoss for the reasons:
<ol>
<li>Hypersonic database is in-memory, which means that over time it will consume more memory. If a large
number of certificates is issued, it will become an issue after a while.</li>
<li>Hypersonic does not support full SQL, in particular ALTER statements. When a new version of EJBCA is 
released we can not create scripts that updates the database if some tables changed. This will make 
upgrades much much harder.</li>
</ol>
</p><p>
For information about installing JDBC drivers for other databases, see the document <i>'doc/howto/HOWTO-database.txt'</i>
in the distribution.
</p>
</subsubsection>

</subsection>

<subsection name="Install">
<p>
Note that the installation must be done with a user with privileges to write to APPSRV_HOME and subdirs. 
</p><p>
1) Set the environment variable APPSRV_HOME to where your JBoss is installed,
examples:
</p> 
<source>
APPSRV_HOME=/opt/jboss-5.1.0
</source>
<source>
APPSRV_HOME=/opt/jboss-6.0.0.Final
</source>
<p>Also make sure the right java tools (javac/keytool) are available in your system PATH, ie. /usr/local/jdk1.6.0_21/bin.
<br/>Due to Java's memory handling you may need to assign more memory to ant in order to build the system without OutOfMemory errors. 
You can do that by setting an environment variable:
</p>
<source>
ANT_OPTS=-Xmx512m
</source>
<p>
2) Open a console and type:
</p>
<source>
ant bootstrap
</source>
<p>it will compile, jar, war, ear everything and deploy it to JBoss. You will be prompted to enter the value for database.password if it has not already been defined in database.properties. 
</p><p>
3) Open a console (terminal) and start JBoss.
You can start JBoss with the normal command 'run.sh/cmd' from APPSRV_HOME/bin. You should see JBoss
picking up everything and deploying the ear without errors.
</p><p>
4) Type:
</p>
<source>
ant install
</source>
<p>it will generate all certificates, keys, etc needed to run with an initial CA.
You will find admin keys in ${ejbca.home}/p12. (do not delete those files!)
<br/>The command 'ant install' is only run once, when the CA is first installed. It creates lots of things in the database, 
and can not be run again (it will give an error if you try).
<ul>
<li>tomcat.jks is for the Servlet container (don't bother with it)</li>
<li>truststore.jks is for the Servlet container (don't bother with it)</li>
<li>superadmin.p12 should be imported in your browser, that's your administration certificate.</li>
</ul>
</p>
<note>
Instead of creating an initial Admin CA and issuing administrator certificates from that, you can install using administrator certificates from an already existing external CA.
See <a href="userguide.html#Administrators%20issued%20by%20external%20CAs">Administrators issued by external CAs</a> for more information. This would replace step 4-8, but instead require other steps.
</note>
<p>
5) Stop JBoss (ctrl+c or whatever)
</p><p>
6) Type:
</p>
<source>
ant deploy
</source>
<p>this will deploy everything again and configure the servlet
container with the keystore file (this is why we needed to stop the container). You will again be prompted for httpserver.password, java.trustpassword and database.password, if these have not been predefined in web.properties and database.proprties respectively.
</p><p>
7) Import the certificate from EJBCA_HOME/p12/superadmin.p12 in your web browser. 
This is the super administrators certificate used to access the admin GUI. 
Other administrators with specific privileges can be created later on.
The default password for superadmin.p12 is ejbca, and is configured in ejbca.properties.
</p><p>
8) Start JBoss again and go to https://localhost:8443/ejbca/ to access the admin-GUI, 
or http://localhost:8080/ejbca for the public pages.
</p><p>
If you create other CAs that you want to add as acceptable CAs in the SSL server configuration, 
or if you renew the CA certificate, you can install any CA certificate in the SSL server configuration afterwards 
with the following command:
</p>
<source>
ant -Dca.name="My CA Name" javatruststore
</source>
<p>
What this does in the background is that it adds the CA certificate to p12/truststore.jks and copies this file
to JBOSS_HOME/server/default/conf/keystore, where the SSL keystores are located.
</p>
<p>
You must stop and start JBoss after doing this.
</p>
</subsection>

<subsection name="Using JBoss/Tomcat native SSL connector">
<p>Instead of the regular Tomcat SSL connector you can configure to use the native connector, which is supposed to 
improve performance.
</p><p>
See documentation in src/appserver/tomcat60jboss5.
</p> 
</subsection>

<subsection name="Additional howtos">
<p>
In the directory doc/howto in the distribution there are additional howtos for some specific platforms and configurations.
</p>
</subsection>

</section>

<section name="Ubuntu quick start">
<p>This section provides a fast way to get installed and running for a test using Ubuntu Linux. 
To get more information a about configuration options etc (there are plenty), you should follow the regular <strong>Quick start guide</strong> above.
</p><p>
This quick start guide assumes EJBCA 4.0.0 and JBoss 5.1.0.GA, but other version should also be possible to use by just replacing the versions.
We also assume installation is made in a user account with username "user". In your environment simply replace user with the username you are using.
</p>
<ol>
<li>Install Ubuntu 10.10 server x64, default config, only OpenSSH server selected (or other Ubuntu of your choice, for example Ubuntu Desktop).</li>
<li>Open a new terminal "ejbca".</li>
<li>Copy jboss-5.1.0.GA-jdk6.zip and ejbca_4_0_0.zip to machine user account.</li>
<li>Install needed software from Ubuntu repositories.
<br/>
<code>sudo apt-get install openjdk-6-jdk ant ant-optional unzip
</code>
</li>
<li>Install software not in Ubuntu repositories.
<br/>
<code>
unzip jboss-5.1.0.GA-jdk6.zip
<br/>unzip ejbca_4_0_0.zip
</code>
</li>
<li>Set APPSRV_HOME environment variable so EJBCA can find the application server (JBoss).
<br/>
<code>
vim .bashrc
</code>
<br/>In the end of the file add:
<br/>
<code>
export APPSRV_HOME=/home/user/jboss-5.1.0.GA
</code>
</li>
<li>Log out and in again, terminal "ejbca".</li>
<li>Build and deploy EJBCA to JBoss.
<br/>
<code>
cd ejbca_4_0_0
<br/>ant bootstrap
</code>
</li>
<li>Open new terminal "jboss" and start JBoss.
<br/>
<code>
cd jboss-5.1.0.GA/bin
<br/>./run.sh
</code>
</li>
<li>Go back to terminal "ejbca" and run install to create initial administrator CA.
<br/>
<code>
ant install
<br/>(choose all default values)
<br/>ant deploy
</code>
</li>    
<li>Go back to terminal "jboss" and restart JBoss.
<br/>
<code>
ctrl-c
<br/>./run.sh
</code>
</li>
<li>Import /home/user/ejbca_4_0_0/p12/superadmin.p12 in web browser.</li>
<li>Go to http://localhost:8443/ejbca</li>
</ol>
<p>Done!</p>
</section>

<section name="Application servers">
<p>
EJBCA should run on any on any JEE5 compliant application server in theory. In reality it doesn't.
<ol>
<li>JBoss 5.1.0.GA / JBoss EAP 5.1: Works well. Community and professional support available.</li>
<li>Glassfish 2.1.1: Works. Community and professional support available.</li>
<li>WebLogic 10.3.3: Not supported yet.</li>
<li>WebSphere 7.0.0.13: Not supported yet.</li>
<li>Geronimo: Not supported yet.</li>
<li>JoNaS: Not supported yet.</li>
<li>OC4J: Not supported. Not JEE5 compliant and never will be.</li>
</ol>
</p>

<subsection name="JBoss">
<subsubsection name="Schema validation">
<p>By default JBoss (at least 6.0.0) tries to validate schemas when deploying for example web services (XKMS is notorious). 
If you don't have an internet connection this will obviously not work if the appserver does not have all schema built in (it does not for XKMS).
You can luckily turn of schema validation. Here is RedHat's <a href="http://docs.redhat.com/docs/en-US/JBoss_Enterprise_Web_Platform/5/html/Installation_Guide/migration.apps.html">description</a>.
</p>
<p>Edit file <i>server/default/deployers/ear-deployer-jboss-beans.xml</i> and look for the following sections:</p>
<source>
&lt;!-- uncomment to disable xml validation
&lt;property name="useValidation"&gt;false&lt;/property --&gt;
&lt;!-- in case xml validation is disabled, it's also better to turn off schema validation
&lt;property name="useSchemaValidation"&gt;false&lt;/property --&gt;
</source>
</subsubsection>
</subsection>
<subsection name="Glassfish">
<p>
Currently EJBCA has been tested with Glassfish v2.1.1.
</p>
<p>Don't forget to install 'Unlimited Strength Jurisdiction Policy Files' for Java.</p>
<note>
Hot redeployment on Glassfish 2.1.1 does not work due to conflicting version of the Xerces library (<a href="https://jira.primekey.se/browse/ECA-1887">ECA-1887</a>). 
</note>

<subsubsection name="Derby">
<p>
<ol>
<li>Start JavaDB and create the database instance.
<pre>
  cd $APPSRV_HOME
  bin/asadmin start-database
  export DERBY_HOME=$APPSRV_HOME/javadb
  javadb/bin/ij   
  ij> connect 'jdbc:derby://localhost:1527/ejbca;create=true';
  ij> quit;
</pre>
</li>
<li>Start the application server:
<pre>
bin/asadmin start-domain
</pre>
  The default user/password for the web console is admin/adminadmin.<br/>
  Access the Glassfish admin console at http://127.0.0.1:4848/.</li><br/>
<li>Create a connection pool for your database. In the admin console this is done in Resources->JDBC->Connection Pools.<br/>
    When adding a Derby Pool use values: Name=EjbcaPool, Type=javax.sql.DataSource, Vendor=JavaDB.<br/>
    Properties: user=APP, password=APP, DatabaseName=ejbca<br/>
    Save and use the Ping-button for the pool. If you get 'Parameter wrong for this method : off', go to Additional Properties and delete 'Ssl'.<br/>
    Command line alternative:
    <pre>
    bin/asadmin create-jdbc-connection-pool --datasourceclassname org.apache.derby.jdbc.ClientDataSource --property user=APP:password=APP:DatabaseName=ejbca:ServerName=localhost:port=1527 EjbcaPool
    </pre>
</li>    
<li>Create a datasource called jdbc/EjbcaDS, in the admin console this is done in Resources->JDBC->JDBC Resources. Use the connection pool you just created.<br/>
    Command line alternative:
    <pre>
    bin/asadmin create-jdbc-resource --connectionpoolid EjbcaPool jdbc/EjbcaDS
    </pre>
    If security is enabled you have to add "--user admin --passwordfile pwd.txt" as command line parameters where pwd.txt contains 'AS_ADMIN_PASSWORD=adminadmin'.
</li>
</ol>
</p>
</subsubsection>

<subsubsection name="MySQL">
<p>
<ol>
<li>Start the database and create the MySQL database "ejbca". Grant privileges to the "ejbca" user with password "ejbca_pwd" (don't use this password in production!)</li>
<li>Copy the MySQL JDBC JAR to APPSRV_HOME/lib/</li>
<li>Start the application server:
<pre>
asadmin start-domain
</pre>
</li>
<li>Add the Connection Pool and DataSource from the Glassfish Admin Console (see "Derby") or use command line:
<pre>
asadmin create-jdbc-connection-pool --datasourceclassname com.mysql.jdbc.jdbc2.optional.MysqlDataSource --property user=ejbca:password=ejbca_pwd:DatabaseName=ejbca:ServerName=localhost:port=3306 EjbcaPool
asadmin create-jdbc-resource --connectionpoolid EjbcaPool jdbc/EjbcaDS
</pre>
</li>
</ol>
</p>
</subsubsection>

<subsubsection name="Configure EJBCA">
<p>
<ol>
<li>Edit conf/ejbca.properties, you should at least set appserver.home</li>
<li>Edit conf/log4j-glassfish.xml, to configure EJBCA logging.</li>
<li>Edit conf/database.properties, you should at least set the database settings for your chosen database. Derby and MySQL has been tested with Glassfish.</li>
<li>Edit conf/web.properties, you should set desired values and also the http/s ports (default 8080 and 8181) for your installation.</li>
</ol>
</p>
</subsubsection>    

<subsubsection name="Deploy and setup">
<p>
<ol>
<li>Build and deploy EJBCA with<br/>
<pre>
ant clean
ant bootstrap
</pre>
or
<pre>
ant clean
ant
asadmin deploy --precompilejsp EJBCA_HOME/dist/ejbca.ear
</pre>
You can check that everything was ok in APPSRV_HOME/domains/domain1/logs/server.log.</li><br/>
<li>Install EJBCA
<pre>
ant install
</pre>
</li>
<li>Configure SSL in Glassfish<br/>
    Configuration->HTTP Service->HTTP Listeners->http-listener-2, SSL tab
    <ul>
       <li>Client Authentication: Enabled</li>
       <li>Certificate Nickname: s1as (get alias name by running 'keytool -list -v -keystore $APPSRV_HOME/domains/domain1/config/keystore.jks', password changeit)</li>
       <li>SSL3: Enabled</li>
       <li>Ciphers Suite: All</li>
    </ul>
    Add CA certificate to cacerts file:
    <ul>
       <pre>
       cd $EJBCA_HOME
       keytool -exportcert -keystore p12/truststore.jks -file p12/adminca1.der -storepass changeit -alias adminca1
       </pre>
    </ul>
    Install the CA certificate in the application servers truststore.<br/>
    On Glassfish open source:
    <ul>
       <pre>
       keytool -delete -keystore  $APPSRV_HOME/domains/domain1/config/cacerts.jks -alias adminca1 -storepass changeit
           (will fail if this hasn't been done before)
       keytool -importcert -keystore $APPSRV_HOME/domains/domain1/config/cacerts.jks -file $EJBCA_HOME/p12/adminca1.der -storepass changeit
       </pre>
    </ul>
    On Glassfish Enterprise:
    <ul>
    <li>cd $APPSRV_HOME/domains/domain1/config</li>
    <li>/usr/sfw/bin/certutil -A -n adminca1 -t "p,p,p" -i $EJBCA_HOME/p12/adminca1.der -d .</li>
    <li>verify that adminca1 has been added to the store with '/usr/sfw/bin/certutil -L -d .'.</li>
    </ul><br/>
    <li>
    (Optional) Replace the SSL keystore and truststore with default passwords.<br/>
    In a production environment you probably want to change the keystore passwords, to do this you must edit both the http-listener and the IIOP-listeners.
    <pre>
    cd $EJBCA_HOME
    cp p12/tomcat.jks p12/keystore.jks
    keytool -list -keystore p12/keystore.jks -storepass serverpwd
        Read the alias for the "PrivateKeyEntry" e.g. 'localhost'.
    keytool -keypasswd -keystore p12/keystore.jks -alias localhost -storepass serverpwd -keypass serverpwd -new changeit
    keytool -storepasswd -keystore p12/keystore.jks -storepass serverpwd -new changeit
    keytool -changealias -keystore p12/keystore.jks -alias localhost -destalias s1as -keypass changeit -storepass changeit
    cp p12/keystore.jks $APPSRV_HOME/domains/domain1/config/keystore.jks
    </pre>
    </li>
    <li>Restart server
    <pre>
    asadmin stop-domain
    asadmin start-domain
    </pre>
    </li>
</li>
<li>Access protected EJBCA pages<br/>
    Import $EJBCA_HOME/p12/superadmin.p12 in your browser and go to url:<br/>
      https://127.0.0.1:8181/ejbca/<br/>
    You can now click "Administration" to get to the admin-GUI.</li><br/>
<li>(Optional) Change how often an EJBCA Service can run: Configuration -> EJB Container -> EJB Timer Service -> Minimum Delivery Interval: 1000. Restart application server.<br/>
This can also be changed using the "minimum-delivery-interval-in-millis" attribute in the domain.xml-file when the appserver isn't running.</li>
<li>(Optional) Apply workaround to enable redeployment without application server restart: See <a href="https://jira.primekey.se/browse/ECA-1887">ECA-1887</a>.</li>
</ol>
</p>    
</subsubsection>

<subsubsection name="Glassfish Ubuntu package">
<p>
The above instructions are tested on the official release from Glassfish's homepage. 
We had this report from a user of the glassfish package on ubuntu.
</p>
<p> 
I had to modify the following to make it work with the Ubuntu 9.04
glassfish package.
<pre>
1. Modify /usr/bin/asadmin
   #GF_DOMAIN_DIR=$HOME/glassfishv2
   GF_DOMAIN_DIR=/var/lib/glassfishv2/domains
2. Set APPSRV_HOME to /usr/share/glassfishv2
</pre>
The Ubuntu package has the domains and binaries separated.  When
following the install instructions, when you do anything with the
domain you have to point to /var/lib/glassfishv2/[directory] instead
of $APPSRV_HOME/[directory].
</p>
</subsubsection>
</subsection>

<subsection name="Weblogic">
<p>
WebLogic Server 10 is JEE5 certified. EJBCA has been tested with Oracle WebLogic Server 11gR1 (10.3.3) generic distribution,
Oracle JDK and Oracle Database 10.2.0.1-1.0 XE.
</p>
<p>
The following does not work:
<ul>
<li>EJBCA Web Services, which uses JAX-WS does not work.</li>
<li>Some Remote EJB calls, like fetching CA Info used by multiple EJBCA functions.</li>
</ul>
</p>

<subsubsection name="Configure EJBCA">
<p>
The following must be configured for WebLogic:
<ol>
<li>conf/ejbca.properties: 'appserver.home' should be pointing to where weblogic is installed. (weblogic.jar is located under ${appserver.home}/wlserver_10.3/server/lib)</li>
<li>conf/database.properties: configure accoring to the used database</li>
<li>conf/web.properties: httpserver.pubhttp=7001</li>
<li>conf/web.properties: httpserver.privhttps=7002</li>
<li>conf/mail.properties: mail.jndi-name=mail/EjbcaMail</li>
<li>conf/jndi.properties.weblogic: modify the principal and credentials according to you weblogic
    domain's setting (same as the user name/password to login weblogic console).
    The default in the EJBCA installation is weblogic/foobar123.
</li>
<li>conf/jaxws.properties: ejbcaws.enabled=false</li>
<li>conf/log4j-weblogic.xml: Path and log-levels for EJBCA specific logging.</li>
</ol>
</p>
<p>
If you had issued an 'ant' command before, it is now important to do 'ant clean' before building again.
Build ejbca.ear (ejbca/dist/ejbca.ear) with 'ant'.
</p>
</subsubsection>

<subsubsection name="Configure Weblogic">
<p>
<ol>
<li>Access the Weblogic management console at: http://127.0.0.1:7001/console/</li>
<li>Environment -> JDBC -> DataSources:<br/>
Create a new non-XA DataSource "EjbcaDS" with JNDI name "EjbcaDS" of type "Oracle".
(The URL for the pool should be something like "jdbc:oracle:thin:@127.0.0.1:1521:XE" for Oracle XE.)</li>
<li>Deploy JSF 1.2 support: Install wlserver_10.3/common/deployable-libraries/jsf-1.2.war as a library named "jsf".</li>
<li>Increase transaction timeout: Services -> JTA -> Timeout Seconds=300</li>
<li>Build the wlfullclient.jar library: cd ${appserver.home}/wlserver_10.3/server/lib; java -jar wljarbuilder.jar</li>
<li>Create a new java mail session for user notification in UserAdminSessionBean. In Weblogic, the JNDI name should
 be "mail/EjbcaMail" (same as you configured in mail.properties).<br/>
key in the properties:
  <pre>
  mail.store.protocol=pop3
  mail.transport.protocol=smtp
  mail.user=foouser
  mail.pop3.host=pop.foo.com
  mail.smtp.host=smtp.foo.com
  mail.smtp.port=25
  mail.smtp.auth=false
  mail.smtp.starttls.enable=false
  mail.from=foouser@foo.com
  mail.debug=false
  </pre>
  Do not forget to activate the mail session in you target server.
  </li>
</ol>
</p>
</subsubsection>

<subsubsection name="Deploy and setup">
<p>
<ol>
<li>Deploy EJBCA: Install "$EJBCA_HOME/dist/ejbca.ear" that you built with Ant. It should deploy straight away without errors.</li>
<li>Run 'ant install' to do the installation. Everything should work here with no errors. 
   If you get errors these must be resolved before we can move on.<br/>
   The command 'ant install' is only run once, when the CA is first installed. It creates lots of things in the database, and can not be run again 
   (it will give an error if you try).</li>

<li>Configure SSL in Weblogic:<br/>
<ol>
<li>(Optional for Weblogic 10.3:) Copy $EJBCA_HOME/p12/truststore.jks to $BEA_HOME/jre/lib/security/cacerts, so that Weblogic can trust the initial CA installed 
when doing 'ant install'.<br/>
You can create a new 'cacerts' file with 'rm $EJBCA_HOME/p12/truststore.jks' and then 'ant javatruststore'.
Type 'ant -p' to get a description how you can run 'ant javatruststore' with arguments to point to a specific keystore etc.
You can get the CA certificate with 'bin/ejbca.sh ca getrootcert cert.pem'.</li>
<li>Configure weblogic server for SSL.<br/>
   For Weblogic 10.3.0: 
   Servers->examplesServer->Keystores (or SSL), select "Custom Identity and Custom Trust"<br/>
     - Custom Identity Keystore: path to tomcat.jks generated while "ant install" (ejbca/p12/tomcat.jks),<br/>
     - Private Key Alias: localhost (httpsserver.hostname in conf/web.properties).<br/>
       The alias is what you configured as httpsserver.hostname in conf/web.properties<br/>
     - Passphrase: serverpwd (httpsserver.password in conf/web.properties).<br/>
       The password is what you configures as httpsserver.password in conf/web.properties.<br/><br/>
     - Custom Trust Keystore: path to truststore.jks generated while "ant install" (ejbca/p12/truststore.jks),<br/>
     - Passphrase: changeit (java.trustpassword in conf/web.properties).<br/><br/>
   Servers->Myserver->Configuration->SSL->Advanced->Server Attributes->Two Way Client Cert Behavior:<br/>
     - Client Certs Requested But Not Enforced<br/><br/>
   Servers->Myserver->configuration->general, check "SSL Listen Port Enabled", note that the port should be same as httpserver.privhttps in ejbca.properties.
   </li>
   </ol>
</li>
</ol>
This should make the Admin GUI work, note to install the  Unlimited Strength Jurisdiction Policy Files from java.sun.com 
for both sun's JDK and BEA's JDK first before installation. For Weblogic 10.3 it wa possible to skip the installation of the
bundled JDK's and use a pre-installed Sun JDK.
</p>
</subsubsection>

</subsection>


<subsection name="Websphere (EJBCA 3.6)">
<p>
EJBCA 3.6 has been tested with Websphere ND 6.1 and Oracle 10g or PostgreSQL 8.2 database.
<br/>(Websphere Express seems broken and Websphere Community Edition is a completely different appserver).
<br/><br/>Note! Due to the massive work involved to support Websphere not all versions will be deployable. Currently only EJBCA 3.6 is possible to install on Websphere.
</p>
<p>Install the Unlimited strength crypto policy files for the IBM java shipped with Websphere. 
You need to download these files from IBM. The IBM policy files version 1.4.2 works with IBM JDK 5.</p>
<p>Websphere runs with IBMs java 5 and EJBCA should be compiled with this compiler as well.</p>
<p>
Installing Websphere on Ubuntu linux requires you to change /bin/sh to /bin/bash in all shell scripts, because Ubuntu uses /bin/dash as /bin/sh but Websphere requires bash.<br/>
</p><source>
sudo perl -p -i -e "s/\/sh$/\/bash/"  /opt/IBM/WebSphere/AppServer/bin/*.sh
</source>
<p>
(point the IBM directory to where you install Websphere)
</p>
<subsubsection name="Configure EJBCA">
<p>
<ol>
<li>Edit conf/ejbca.properties, you should at least set appserver.type, appserver.home and logging.log4j.config.</li>
<li>Edit conf/database.properties, you must configure the database settings for your chosen database.<br/>
      use 'datasource.jndi-name=EjbcaDS' (default)<br/>
      use 'datasource.jndi-name-prefix=jdbc/'</li>
<li>Edit conf/web.properties, you should set desired values and also http/s ports (i.e. 9080 etc).</li>
<li>Edit conf/mail.properties, set 'mail.jndi-name=EjbcaMail'</li>
<li>Edit conf/jaxws.properties, set 'ejbcaws.enabled=false'<br/>
      You can use the WS-API, i.e set the property to true, in WebSphere. But if you do not plan to use it, we recommend that you keep it as false. See below for more WS-API info.</li>
<li>Edit conf/xkms.properties, set 'xkms.enabled=false' (default from EJBCA 3.10)</li>
<li>Edit conf/jndi.properties.websphere and set the currect port from Servers->Application servers->server1 (your server)->Ports->BOOTSTRAP_ADDRESS.</li>
</ol>

Build EJBCA with 'ant'.<br/>
(files in src/deploy/websphere will be populated with your configured database settings)<br/>
Do 'ant clean' first if you have tried with different appservers, or database settings.
</p>
</subsubsection>

<subsubsection name="WebService API">
<p>If is possible to use the WebService API in WebSphere. Most API functions are working, while a 
few seems to be hit by incompatibility issues. When EJBCA with WS-API is deployed in WebSphere you
can use the regular WS CLI (command line interface) to make WS calls from another machine.
<br/>
The wsdl is accessible using the url: http://localhost:9080/ejbca/ejbcaws/ejbcaws?wsdl
</p>
<p>
It is also possible to deploy EJBCA WebService API in Websphere as a separate war file.<br/>
AFTER you have deployed and installed EJBCA below you can perform these steps:
<ol>
<li>Generate the stand alone ejbcaws.war file for Websphere with 'ant ejbcaws.war.standalone'.</li>
<li>Deploy the file dist/ejbcaws.war in Websphere.</li>
<li>Get the generated WSDL with url: http://127.0.0.1:9080/ejbcaws/ejbcaws?wsdl</li>
<li>Configure the ejbcaws CLI in dist/ejbcawscli/ejbcawsracli.properties.</li> 
</ol>
</p>  
</subsubsection>

<subsubsection name="Configure Websphere">
<p>
Configure Websphere in the admin console.
<ol>
<li>Create tables in your database using the script supplied in doc/howto/create-tables-ejbca3-oracle.sql or doc/howto/create-tables-ejbca3-postgres.sql.</li>
<li>Navigate to 'Resources->Mail->Mail sessions' and create a new MailSession called 'MailSession' with jndiName 
  same as mail.jndi-name configured in conf/mail.properties (EjbcaMail).</li> 
<li>Create a new DataSource:<br/>
  Creating a datasource for Oracle:
  <ul>
  <li>Install the oracle jdbc jar (ex ojdbc4.jar) in $WAS_HOME/lib.</li>
  <li>Navigate to Resources->JDBC->JDBC Providers</li>
  <li>Select for example Cell scope, and click New</li>
  <li>Select 'Oracle' from 'Database type' dropdown</li>
  <li>Select 'Connection pool data source' from 'Implementation type' dropdown</li>
  <li>Insert the path to the jar file, i.e. $WAS_HOME/lib</li>
  <li>Finish and save</li>
  <li>Navigate to Resources->JDBC->Data sources</li>
  <li>Select for example Cell scope, and click new</li>
  <li>Provide a data source and Jndi name, jndi name must match the jndi-name-prefix and jndi-name configured in database.properties, e.g. jdbc/EjbcaDS</li>
  <li>Click next</li> 
  <li>Select your created JDBC Provider, and click Next</li>
  <li>Enter the database URL, e.g. jdbc:oracle:thin:@127.0.0.1:1521:ejbca</li>
  <li>Select 'Oracle10g data store helper', and click Next. The checkbox 'Use this data source in container managed persistence (CMP)' must be checked.</li>
  <li>Finish</li>
  <li>Navigate to Resources->JDBC->Data sources</li>
  <li>Select the created data source</li>
  <li>Click on the 'JAAS - J2C authentication data' link</li>
  <li>Add new record:<br/>
      Alias: ejbca<br/>
      User ID: ejbca<br/>
      Password: ejbca</li>
  <li>Save all changes</li>
  <li>Go back to the datasource and select the create authentication provider as 'Component-managed authentication alias'</li>
  <li>Click OK and save all changes</li>
  <li>You can now go in and 'Test Connection' for your new DataSource. Make sure it is successful</li>
  </ul>
  Creating a datasource for PostgreSQL:<br/>
  <ul>
  <li>DataSourceProvider: For postgres I used 'User-defined' type and implementation class name 'org.postgresql.jdbc3.Jdbc3ConnectionPool', or 'org.postgresql.xa.PGXADataSource'. I used the jdbc driver postgresql-8.2-507.jdbc3.jar.</li>
  <li>DataSource: You have to add Custom Properties to the datasource with databaseName, serverName and port (port is optional).</li>
  </ul>     
  </li>
</ol>
</p>
</subsubsection>

<subsubsection name="Deploy and setup">
<p>
Log into the admin console of Websphere to deploy EJBCA.
<ol>
<li>Install new application.</li>
<li>Select ejbca.ear and 'Show me all installation options and parameters' and click next.</li>
<li>Click next. Click next all the time unless anything else is noted here.</li>
<li>When you get the option to select database type at Step 3 (Deploy EJB option - Database type) select 'ORACLE_V10G' for Oracle, or empty for PostgreSQL.</li>
<li>At the next step, Step 4, select Current Backend Id, ORACLE_V10_1 for Oracle or CLOUDSCAPE_V51_1 for PostgreSQL (if using Oracle you may not get this choice).</li>
<li>Click next until you reach the end, or jump directly to the last step by clicking in the left meny.</li>
<li>Click finish</li>
<li>In order to use the cli in EJBCA you must copy the generated ejbca-ejb.jar to local lib, so we have it in the classpath for command line operations.
example: cp /opt/IBM/WebSphere/AppServer/profiles/AppSrv04/installedApps/computerNode01Cell/EJBCA.ear/ejbca-ejb.jar $EJBCA_HOME/lib/.
</li>
<li>Now you can run 'ant install' to install EJBCA.</li>
</ol>
</p>
<p>
Efter deployment and installation you want to configure SSL in Websphere so you can access the Admin-GUI in EJBCA. 
The admin-GUI in EJBCA requires client certificate authentication.  
<br/>Configure the SSL port to require client certificate in order to access the admin-GUI:
<ol>
  <li>Navigate to Servers->Application servers->server1->Web Container Settings->Web container transport chains</li>
  <li>Change the WCInboundDefaultSecure to require client certificate. The trick is to create a new node SSL 
    configuration that manages this connection. You don't want to require SSL in the NodeDefaultSSLSettings, since
    that will apply to your Websphere admin as well. You set 'require client cert' in the Quality of protection settings.</li>
  <li>Add the CA certificate from EJBCA to the default trust store and use that. In Websphere ND you add certificates to the truststore under
      Security->SSL Certificateas and key mgmt->Key stores and certificates->CellDefaultTrustStore->Signer certificates.<br/>
      You can download the certificate for AdminCA1 for example with the CLI command:<br/> 
      bin/ejbca.sh ca getrootcert AdminCA1 adminca1.der -der<br/>
      Then you add the certificate in CellDefaultTrustStore as 'Binary DER data'.</li>
  <li>You have to restart the server after configuring this (complete restart with server, node and mgr).</li>
  <li>(You can also add a new server SSL keystore by creating a PKCS12 file in EJBCA and adding that in 'Key stores and certificates' and using 
it in the SSLSettings for WCInboundDefaultSecure).</li>
</ol>
After this you should be able to access the admin-GUI in EJBCA after installing $EJBCA_HOME/p12/superadmin.p12 in your browser.
</p>
<p>
Public web will be at: http://127.0.0.1:9080/ejbca/index.jsp<br/>
Admin web will be at: https://127.0.0.1:9443/ejbca/adminweb/index.jsp
</p>
<p>
The default password for SSL keystore (key.p12) in Websphere is WebAS.
</p>
</subsubsection>

</subsection>

</section>

<section name="Transaction timouts">
<p>In some cases, either if you have a slow machine, or very large data sets some common operations can take a long time to complete. The default transaction timout of 
the application servers may then not be enough.</p>
<subsection name="JBoss">
<p>In order to change the defautl transaction timeout in JBoss you can edit the file JBOSS_HOME/server/default/deploy/transaction-jboss-beans.xml. 
There is a property you can change:</p>
<source>
&lt;property name="defaultTimeout"&gt;300&lt;/property&gt;
</source>
</subsection>
<subsection name="Weblogic">
<p>In weblogic you change the default transaction timeout in the admin console. <i>Services -&gt; JTA -&gt; Timeout Seconds</i></p>
</subsection>
</section>

<section name="Files deployed">
<p>
Here we describe shortly which files are copied during ant bootstrap and ant deploy. These targets only modified files automatically on the JBoss platforms,
but it will give an indication as well for other platforms what configuration steps are needed.
</p>
<p>
<strong>ant bootstrap</strong>
<ul>
<li>deploy/ejbca-ds.xml</li>
<li>deploy/ejbca-mail-service.xml</li>
<li>deploy/ejbca.ear</li>
</ul>
</p>
<p>
<strong>ant deploy</strong>
<ul>
<li>Files from ant bootstrap</li>
<li>conf/keystore/keystore.jk</li>
<li>conf/keystore/truststore.jks</li>
<li>deploy/jboss-web.deployer/server.xml</li>
</ul>
</p>
</section>

</body>
</document>
